{"version":3,"file":"holster-storage-C9HD0S4m.cjs","sources":["../node_modules/@noble/hashes/esm/crypto.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/_md.js","../node_modules/@noble/hashes/esm/sha2.js","../node_modules/@noble/hashes/esm/hmac.js","../node_modules/@noble/curves/esm/utils.js","../node_modules/@noble/curves/esm/abstract/modular.js","../node_modules/@noble/curves/esm/abstract/curve.js","../node_modules/@noble/curves/esm/abstract/weierstrass.js","../node_modules/@noble/curves/esm/_shortw_utils.js","../node_modules/@noble/curves/esm/secp256k1.js","../node_modules/@noble/hashes/esm/sha256.js","../src/crypto-core.ts","../src/schemas.ts","../src/rdx-core.ts","../src/holster-storage.ts"],"sourcesContent":["export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is positive integer. */\nexport function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nexport function abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nexport function ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n/** The byte swap operation for uint32 */\nexport function byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** @deprecated */\nexport const byteSwapIfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n    return arr;\n}\nexport const swap32IfBE = isLE\n    ? (u) => u\n    : byteSwap32;\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function createOptHasher(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function createXOFer(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport const wrapConstructor = createHasher;\nexport const wrapConstructorWithOpts = createOptHasher;\nexport const wrapXOFConstructorWithOpts = createXOFer;\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return Uint8Array.from(crypto.randomBytes(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { Hash, abytes, aexists, aoutput, clean, createView, toBytes } from \"./utils.js\";\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        clean(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV = /* @__PURE__ */ Uint32Array.from([\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV = /* @__PURE__ */ Uint32Array.from([\n    0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n//# sourceMappingURL=_md.js.map","/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from \"./_md.js\";\nimport * as u64 from \"./_u64.js\";\nimport { clean, createHasher, rotr } from \"./utils.js\";\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor(outputLen = 32) {\n        super(64, outputLen, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        clean(SHA256_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        clean(this.buffer);\n    }\n}\nexport class SHA224 extends SHA256 {\n    constructor() {\n        super(28);\n        this.A = SHA224_IV[0] | 0;\n        this.B = SHA224_IV[1] | 0;\n        this.C = SHA224_IV[2] | 0;\n        this.D = SHA224_IV[3] | 0;\n        this.E = SHA224_IV[4] | 0;\n        this.F = SHA224_IV[5] | 0;\n        this.G = SHA224_IV[6] | 0;\n        this.H = SHA224_IV[7] | 0;\n    }\n}\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor(outputLen = 64) {\n        super(128, outputLen, 16, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = SHA512_IV[0] | 0;\n        this.Al = SHA512_IV[1] | 0;\n        this.Bh = SHA512_IV[2] | 0;\n        this.Bl = SHA512_IV[3] | 0;\n        this.Ch = SHA512_IV[4] | 0;\n        this.Cl = SHA512_IV[5] | 0;\n        this.Dh = SHA512_IV[6] | 0;\n        this.Dl = SHA512_IV[7] | 0;\n        this.Eh = SHA512_IV[8] | 0;\n        this.El = SHA512_IV[9] | 0;\n        this.Fh = SHA512_IV[10] | 0;\n        this.Fl = SHA512_IV[11] | 0;\n        this.Gh = SHA512_IV[12] | 0;\n        this.Gl = SHA512_IV[13] | 0;\n        this.Hh = SHA512_IV[14] | 0;\n        this.Hl = SHA512_IV[15] | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        clean(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        clean(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super(48);\n        this.Ah = SHA384_IV[0] | 0;\n        this.Al = SHA384_IV[1] | 0;\n        this.Bh = SHA384_IV[2] | 0;\n        this.Bl = SHA384_IV[3] | 0;\n        this.Ch = SHA384_IV[4] | 0;\n        this.Cl = SHA384_IV[5] | 0;\n        this.Dh = SHA384_IV[6] | 0;\n        this.Dl = SHA384_IV[7] | 0;\n        this.Eh = SHA384_IV[8] | 0;\n        this.El = SHA384_IV[9] | 0;\n        this.Fh = SHA384_IV[10] | 0;\n        this.Fl = SHA384_IV[11] | 0;\n        this.Gh = SHA384_IV[12] | 0;\n        this.Gl = SHA384_IV[13] | 0;\n        this.Hh = SHA384_IV[14] | 0;\n        this.Hl = SHA384_IV[15] | 0;\n    }\n}\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n    0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n    0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n    0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super(28);\n        this.Ah = T224_IV[0] | 0;\n        this.Al = T224_IV[1] | 0;\n        this.Bh = T224_IV[2] | 0;\n        this.Bl = T224_IV[3] | 0;\n        this.Ch = T224_IV[4] | 0;\n        this.Cl = T224_IV[5] | 0;\n        this.Dh = T224_IV[6] | 0;\n        this.Dl = T224_IV[7] | 0;\n        this.Eh = T224_IV[8] | 0;\n        this.El = T224_IV[9] | 0;\n        this.Fh = T224_IV[10] | 0;\n        this.Fl = T224_IV[11] | 0;\n        this.Gh = T224_IV[12] | 0;\n        this.Gl = T224_IV[13] | 0;\n        this.Hh = T224_IV[14] | 0;\n        this.Hl = T224_IV[15] | 0;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super(32);\n        this.Ah = T256_IV[0] | 0;\n        this.Al = T256_IV[1] | 0;\n        this.Bh = T256_IV[2] | 0;\n        this.Bl = T256_IV[3] | 0;\n        this.Ch = T256_IV[4] | 0;\n        this.Cl = T256_IV[5] | 0;\n        this.Dh = T256_IV[6] | 0;\n        this.Dl = T256_IV[7] | 0;\n        this.Eh = T256_IV[8] | 0;\n        this.El = T256_IV[9] | 0;\n        this.Fh = T256_IV[10] | 0;\n        this.Fl = T256_IV[11] | 0;\n        this.Gh = T256_IV[12] | 0;\n        this.Gl = T256_IV[13] | 0;\n        this.Hh = T256_IV[14] | 0;\n        this.Hl = T256_IV[15] | 0;\n    }\n}\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256 = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224 = /* @__PURE__ */ createHasher(() => new SHA224());\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512 = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384 = /* @__PURE__ */ createHasher(() => new SHA384());\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256 = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224 = /* @__PURE__ */ createHasher(() => new SHA512_224());\n//# sourceMappingURL=sha2.js.map","/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash, clean, Hash, toBytes } from \"./utils.js\";\nexport class HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        clean(pad);\n    }\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { abytes as abytes_, bytesToHex as bytesToHex_, concatBytes as concatBytes_, hexToBytes as hexToBytes_, isBytes as isBytes_, } from '@noble/hashes/utils.js';\nexport { abytes, anumber, bytesToHex, bytesToUtf8, concatBytes, hexToBytes, isBytes, randomBytes, utf8ToBytes, } from '@noble/hashes/utils.js';\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nexport function abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// tmp name until v2\nexport function _abool2(value, title = '') {\n    if (typeof value !== 'boolean') {\n        const prefix = title && `\"${title}\"`;\n        throw new Error(prefix + 'expected boolean, got type=' + typeof value);\n    }\n    return value;\n}\n// tmp name until v2\n/** Asserts something is Uint8Array. */\nexport function _abytes2(value, length, title = '') {\n    const bytes = isBytes_(value);\n    const len = value?.length;\n    const needsLen = length !== undefined;\n    if (!bytes || (needsLen && len !== length)) {\n        const prefix = title && `\"${title}\" `;\n        const ofLen = needsLen ? ` of length ${length}` : '';\n        const got = bytes ? `length=${len}` : `type=${typeof value}`;\n        throw new Error(prefix + 'expected Uint8Array' + ofLen + ', got ' + got);\n    }\n    return value;\n}\n// Used in weierstrass, der\nexport function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nexport function hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex_(bytes));\n}\nexport function bytesToNumberLE(bytes) {\n    abytes_(bytes);\n    return hexToNumber(bytesToHex_(Uint8Array.from(bytes).reverse()));\n}\nexport function numberToBytesBE(n, len) {\n    return hexToBytes_(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n) {\n    return hexToBytes_(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'secret key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes_(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if (isBytes_(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * Copies Uint8Array. We can't use u8a.slice(), because u8a can be Buffer,\n * and Buffer#slice creates mutable copy. Never use Buffers!\n */\nexport function copyBytes(bytes) {\n    return Uint8Array.from(bytes);\n}\n/**\n * Decodes 7-bit ASCII string to Uint8Array, throws on non-ascii symbols\n * Should be safe to use for things expected to be ASCII.\n * Returns exact same result as utf8ToBytes for ASCII or throws.\n */\nexport function asciiToBytes(ascii) {\n    return Uint8Array.from(ascii, (c, i) => {\n        const charCode = c.charCodeAt(0);\n        if (c.length !== 1 || charCode > 127) {\n            throw new Error(`string contains non-ASCII character \"${ascii[i]}\" with code ${charCode} at position ${i}`);\n        }\n        return charCode;\n    });\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nexport function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nexport function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n) => (_1n << BigInt(n)) - _1n;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    const u8n = (len) => new Uint8Array(len); // creates Uint8Array\n    const u8of = (byte) => Uint8Array.of(byte); // another shortcut\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n(0)) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes_(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || isBytes_(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nexport function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\nexport function isHash(val) {\n    return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nexport function _validateObject(object, fields, optFields = {}) {\n    if (!object || typeof object !== 'object')\n        throw new Error('expected valid options object');\n    function checkField(fieldName, expectedType, isOpt) {\n        const val = object[fieldName];\n        if (isOpt && val === undefined)\n            return;\n        const current = typeof val;\n        if (current !== expectedType || val === null)\n            throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n    }\n    Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n    Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map","/**\n * Utils for modular division and fields.\n * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { _validateObject, anumber, bitMask, bytesToNumberBE, bytesToNumberLE, ensureBytes, numberToBytesBE, numberToBytesLE, } from \"../utils.js\";\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _7n = /* @__PURE__ */ BigInt(7);\n// prettier-ignore\nconst _8n = /* @__PURE__ */ BigInt(8), _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n// Calculates a modulo b\nexport function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num, power, modulo) {\n    return FpPow(Field(modulo), num, power);\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number, modulo) {\n    if (number === _0n)\n        throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n)\n        throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction assertIsSquare(Fp, root, n) {\n    if (!Fp.eql(Fp.sqr(root), n))\n        throw new Error('Cannot find square root');\n}\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4(Fp, n) {\n    const p1div4 = (Fp.ORDER + _1n) / _4n;\n    const root = Fp.pow(n, p1div4);\n    assertIsSquare(Fp, root, n);\n    return root;\n}\nfunction sqrt5mod8(Fp, n) {\n    const p5div8 = (Fp.ORDER - _5n) / _8n;\n    const n2 = Fp.mul(n, _2n);\n    const v = Fp.pow(n2, p5div8);\n    const nv = Fp.mul(n, v);\n    const i = Fp.mul(Fp.mul(nv, _2n), v);\n    const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n    assertIsSquare(Fp, root, n);\n    return root;\n}\n// Based on RFC9380, Kong algorithm\n// prettier-ignore\nfunction sqrt9mod16(P) {\n    const Fp_ = Field(P);\n    const tn = tonelliShanks(P);\n    const c1 = tn(Fp_, Fp_.neg(Fp_.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    const c2 = tn(Fp_, c1); //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    const c3 = tn(Fp_, Fp_.neg(c1)); //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    const c4 = (P + _7n) / _16n; //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    return (Fp, n) => {\n        let tv1 = Fp.pow(n, c4); //  1. tv1 = x^c4\n        let tv2 = Fp.mul(tv1, c1); //  2. tv2 = c1 * tv1\n        const tv3 = Fp.mul(tv1, c2); //  3. tv3 = c2 * tv1\n        const tv4 = Fp.mul(tv1, c3); //  4. tv4 = c3 * tv1\n        const e1 = Fp.eql(Fp.sqr(tv2), n); //  5.  e1 = (tv2^2) == x\n        const e2 = Fp.eql(Fp.sqr(tv3), n); //  6.  e2 = (tv3^2) == x\n        tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        const e3 = Fp.eql(Fp.sqr(tv2), n); //  9.  e3 = (tv2^2) == x\n        const root = Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3)   # Select sqrt from tv1 & tv2\n        assertIsSquare(Fp, root, n);\n        return root;\n    };\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P) {\n    // Initialization (precomputation).\n    // Caching initialization could boost perf by 7%.\n    if (P < _3n)\n        throw new Error('sqrt is not defined for small field');\n    // Factor P - 1 = Q * 2^S, where Q is odd\n    let Q = P - _1n;\n    let S = 0;\n    while (Q % _2n === _0n) {\n        Q /= _2n;\n        S++;\n    }\n    // Find the first quadratic non-residue Z >= 2\n    let Z = _2n;\n    const _Fp = Field(P);\n    while (FpLegendre(_Fp, Z) === 1) {\n        // Basic primality test for P. After x iterations, chance of\n        // not finding quadratic non-residue is 2^x, so 2^1000.\n        if (Z++ > 1000)\n            throw new Error('Cannot find square root: probably non-prime P');\n    }\n    // Fast-path; usually done before Z, but we do \"primality test\".\n    if (S === 1)\n        return sqrt3mod4;\n    // Slow-path\n    // TODO: test on Fp2 and others\n    let cc = _Fp.pow(Z, Q); // c = z^Q\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        if (Fp.is0(n))\n            return n;\n        // Check if n is a quadratic residue using Legendre symbol\n        if (FpLegendre(Fp, n) !== 1)\n            throw new Error('Cannot find square root');\n        // Initialize variables for the main loop\n        let M = S;\n        let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n        let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n        let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n        // Main loop\n        // while t != 1\n        while (!Fp.eql(t, Fp.ONE)) {\n            if (Fp.is0(t))\n                return Fp.ZERO; // if t=0 return R=0\n            let i = 1;\n            // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n            let t_tmp = Fp.sqr(t); // t^(2^1)\n            while (!Fp.eql(t_tmp, Fp.ONE)) {\n                i++;\n                t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n                if (i === M)\n                    throw new Error('Cannot find square root');\n            }\n            // Calculate the exponent for b: 2^(M - i - 1)\n            const exponent = _1n << BigInt(M - i - 1); // bigint is important\n            const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n            // Update variables\n            M = i;\n            c = Fp.sqr(b); // c = b^2\n            t = Fp.mul(t, c); // t = (t * b^2)\n            R = Fp.mul(R, b); // R = R*b\n        }\n        return R;\n    };\n}\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P) {\n    // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n    if (P % _4n === _3n)\n        return sqrt3mod4;\n    // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n    if (P % _8n === _5n)\n        return sqrt5mod8;\n    // P ≡ 9 (mod 16) => Kong algorithm, page 11 of https://eprint.iacr.org/2012/685.pdf (algorithm 4)\n    if (P % _16n === _9n)\n        return sqrt9mod16(P);\n    // Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nexport function validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'number',\n        BITS: 'number',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    _validateObject(field, opts);\n    // const max = 16384;\n    // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n    // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n    return field;\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow(Fp, num, power) {\n    if (power < _0n)\n        throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n)\n        return Fp.ONE;\n    if (power === _1n)\n        return num;\n    let p = Fp.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = Fp.mul(p, d);\n        d = Fp.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */\nexport function FpInvertBatch(Fp, nums, passZero = false) {\n    const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n    // Walk from first to last, multiply them by each other MOD p\n    const multipliedAcc = nums.reduce((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = acc;\n        return Fp.mul(acc, num);\n    }, Fp.ONE);\n    // Invert last element\n    const invertedAcc = Fp.inv(multipliedAcc);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (Fp.is0(num))\n            return acc;\n        inverted[i] = Fp.mul(acc, inverted[i]);\n        return Fp.mul(acc, num);\n    }, invertedAcc);\n    return inverted;\n}\n// TODO: remove\nexport function FpDiv(Fp, lhs, rhs) {\n    return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(Fp, n) {\n    // We can use 3rd argument as optional cache of this value\n    // but seems unneeded for now. The operation is very fast.\n    const p1mod2 = (Fp.ORDER - _1n) / _2n;\n    const powered = Fp.pow(n, p1mod2);\n    const yes = Fp.eql(powered, Fp.ONE);\n    const zero = Fp.eql(powered, Fp.ZERO);\n    const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n    if (!yes && !zero && !no)\n        throw new Error('invalid Legendre symbol result');\n    return yes ? 1 : zero ? 0 : -1;\n}\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare(Fp, n) {\n    const l = FpLegendre(Fp, n);\n    return l === 1;\n}\n// CURVE.n lengths\nexport function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    if (nBitLength !== undefined)\n        anumber(nBitLength);\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\n/**\n * Creates a finite field. Major performance optimizations:\n * * 1. Denormalized operations like mulN instead of mul.\n * * 2. Identical object shape: never add or remove keys.\n * * 3. `Object.freeze`.\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n *\n * Note about field properties:\n * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n *\n * @param ORDER field order, probably prime, or could be composite\n * @param bitLen how many bits the field consumes\n * @param isLE (default: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(ORDER, bitLenOrOpts, // TODO: use opts only in v2?\nisLE = false, opts = {}) {\n    if (ORDER <= _0n)\n        throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    let _nbitLength = undefined;\n    let _sqrt = undefined;\n    let modFromBytes = false;\n    let allowedLengths = undefined;\n    if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n        if (opts.sqrt || isLE)\n            throw new Error('cannot specify opts in two arguments');\n        const _opts = bitLenOrOpts;\n        if (_opts.BITS)\n            _nbitLength = _opts.BITS;\n        if (_opts.sqrt)\n            _sqrt = _opts.sqrt;\n        if (typeof _opts.isLE === 'boolean')\n            isLE = _opts.isLE;\n        if (typeof _opts.modFromBytes === 'boolean')\n            modFromBytes = _opts.modFromBytes;\n        allowedLengths = _opts.allowedLengths;\n    }\n    else {\n        if (typeof bitLenOrOpts === 'number')\n            _nbitLength = bitLenOrOpts;\n        if (opts.sqrt)\n            _sqrt = opts.sqrt;\n    }\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);\n    if (BYTES > 2048)\n        throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: bitMask(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        allowedLengths: allowedLengths,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error('invalid field element: expected bigint, got ' + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        // is valid and invertible\n        isValidNot0: (num) => !f.is0(num) && f.isValid(num),\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: _sqrt ||\n            ((n) => {\n                if (!sqrtP)\n                    sqrtP = FpSqrt(ORDER);\n                return sqrtP(f, n);\n            }),\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n        fromBytes: (bytes, skipValidation = true) => {\n            if (allowedLengths) {\n                if (!allowedLengths.includes(bytes.length) || bytes.length > BYTES) {\n                    throw new Error('Field.fromBytes: expected ' + allowedLengths + ' bytes, got ' + bytes.length);\n                }\n                const padded = new Uint8Array(BYTES);\n                // isLE add 0 to right, !isLE to the left.\n                padded.set(bytes, isLE ? 0 : padded.length - bytes.length);\n                bytes = padded;\n            }\n            if (bytes.length !== BYTES)\n                throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n            let scalar = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n            if (modFromBytes)\n                scalar = mod(scalar, ORDER);\n            if (!skipValidation)\n                if (!f.isValid(scalar))\n                    throw new Error('invalid field element: outside of range 0..ORDER');\n            // NOTE: we don't validate scalar here, please use isValid. This done such way because some\n            // protocol may allow non-reduced scalar that reduced later or changed some other way.\n            return scalar;\n        },\n        // TODO: we don't need it here, move out to separate fn\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // We can't move this out because Fp6, Fp12 implement it\n        // and it's unclear what to return in there.\n        cmov: (a, b, c) => (c ? b : a),\n    });\n    return Object.freeze(f);\n}\n// Generic random scalar, we can do same for other fields if via Fp2.mul(Fp2.ONE, Fp2.random)?\n// This allows unsafe methods like ignore bias or zero. These unsafe, but often used in different protocols (if deterministic RNG).\n// which mean we cannot force this via opts.\n// Not sure what to do with randomBytes, we can accept it inside opts if wanted.\n// Probably need to export getMinHashLength somewhere?\n// random(bytes?: Uint8Array, unsafeAllowZero = false, unsafeAllowBias = false) {\n//   const LEN = !unsafeAllowBias ? getMinHashLength(ORDER) : BYTES;\n//   if (bytes === undefined) bytes = randomBytes(LEN); // _opts.randomBytes?\n//   const num = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n//   // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n//   const reduced = unsafeAllowZero ? mod(num, ORDER) : mod(num, ORDER - _1n) + _1n;\n//   return reduced;\n// },\nexport function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexport function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = ensureBytes('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n//# sourceMappingURL=modular.js.map","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { bitLen, bitMask, validateObject } from \"../utils.js\";\nimport { Field, FpInvertBatch, nLength, validateField } from \"./modular.js\";\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nexport function negateCt(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\n/**\n * Takes a bunch of Projective Points but executes only one\n * inversion on all of them. Inversion is very slow operation,\n * so this improves performance massively.\n * Optimization: converts a list of projective points to a list of identical points with Z=1.\n */\nexport function normalizeZ(c, points) {\n    const invertedZs = FpInvertBatch(c.Fp, points.map((p) => p.Z));\n    return points.map((p, i) => c.fromAffine(p.toAffine(invertedZs[i])));\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n        throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\nfunction calcWOpts(W, scalarBits) {\n    validateW(W, scalarBits);\n    const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n    const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n    const maxNumber = 2 ** W; // W=8 256\n    const mask = bitMask(W); // W=8 255 == mask 0b11111111\n    const shiftBy = BigInt(W); // W=8 8\n    return { windows, windowSize, mask, maxNumber, shiftBy };\n}\nfunction calcOffsets(n, window, wOpts) {\n    const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n    let wbits = Number(n & mask); // extract W bits.\n    let nextN = n >> shiftBy; // shift number by W bits.\n    // What actually happens here:\n    // const highestBit = Number(mask ^ (mask >> 1n));\n    // let wbits2 = wbits - 1; // skip zero\n    // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n    // split if bits > max: +224 => 256-32\n    if (wbits > windowSize) {\n        // we skip zero, which means instead of `>= size-1`, we do `> size`\n        wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n        nextN += _1n; // +256 (carry)\n    }\n    const offsetStart = window * windowSize;\n    const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n    const isZero = wbits === 0; // is current window slice a 0?\n    const isNeg = wbits < 0; // is current window slice negative?\n    const isNegF = window % 2 !== 0; // fake random statement for noise\n    const offsetF = offsetStart; // fake offset for noise\n    return { nextN, offset, isZero, isNeg, isNegF, offsetF };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points))\n        throw new Error('array expected');\n    points.forEach((p, i) => {\n        if (!(p instanceof c))\n            throw new Error('invalid point at index ' + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars))\n        throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n        if (!field.isValid(s))\n            throw new Error('invalid scalar at index ' + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap();\nfunction getW(P) {\n    // To disable precomputes:\n    // return 1;\n    return pointWindowSizes.get(P) || 1;\n}\nfunction assert0(n) {\n    if (n !== _0n)\n        throw new Error('invalid wNAF');\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Table generation takes **30MB of ram and 10ms on high-end CPU**,\n * but may take much longer on slow devices. Actual generation will happen on\n * first call of `multiply()`. By default, `BASE` point is precomputed.\n *\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport class wNAF {\n    // Parametrized with a given Point class (not individual point)\n    constructor(Point, bits) {\n        this.BASE = Point.BASE;\n        this.ZERO = Point.ZERO;\n        this.Fn = Point.Fn;\n        this.bits = bits;\n    }\n    // non-const time multiplication ladder\n    _unsafeLadder(elm, n, p = this.ZERO) {\n        let d = elm;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param point Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(point, W) {\n        const { windows, windowSize } = calcWOpts(W, this.bits);\n        const points = [];\n        let p = point;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            // i=1, bc we skip 0\n            for (let i = 1; i < windowSize; i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * More compact implementation:\n     * https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W, precomputes, n) {\n        // Scalar should be smaller than field order\n        if (!this.Fn.isValid(n))\n            throw new Error('invalid scalar');\n        // Accumulators\n        let p = this.ZERO;\n        let f = this.BASE;\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n        const wo = calcWOpts(W, this.bits);\n        for (let window = 0; window < wo.windows; window++) {\n            // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n            const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n            n = nextN;\n            if (isZero) {\n                // bits are 0: add garbage to fake point\n                // Important part for const-time getPublicKey: add random \"noise\" point to f.\n                f = f.add(negateCt(isNegF, precomputes[offsetF]));\n            }\n            else {\n                // bits are 1: add to result point\n                p = p.add(negateCt(isNeg, precomputes[offset]));\n            }\n        }\n        assert0(n);\n        // Return both real and fake points: JIT won't eliminate f.\n        // At this point there is a way to F be infinity-point even if p is not,\n        // which makes it less const-time: around 1 bigint multiply.\n        return { p, f };\n    }\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W, precomputes, n, acc = this.ZERO) {\n        const wo = calcWOpts(W, this.bits);\n        for (let window = 0; window < wo.windows; window++) {\n            if (n === _0n)\n                break; // Early-exit, skip 0 value\n            const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n            n = nextN;\n            if (isZero) {\n                // Window bits are 0: skip processing.\n                // Move to next window.\n                continue;\n            }\n            else {\n                const item = precomputes[offset];\n                acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n            }\n        }\n        assert0(n);\n        return acc;\n    }\n    getPrecomputes(W, point, transform) {\n        // Calculate precomputes on a first run, reuse them after\n        let comp = pointPrecomputes.get(point);\n        if (!comp) {\n            comp = this.precomputeWindow(point, W);\n            if (W !== 1) {\n                // Doing transform outside of if brings 15% perf hit\n                if (typeof transform === 'function')\n                    comp = transform(comp);\n                pointPrecomputes.set(point, comp);\n            }\n        }\n        return comp;\n    }\n    cached(point, scalar, transform) {\n        const W = getW(point);\n        return this.wNAF(W, this.getPrecomputes(W, point, transform), scalar);\n    }\n    unsafe(point, scalar, transform, prev) {\n        const W = getW(point);\n        if (W === 1)\n            return this._unsafeLadder(point, scalar, prev); // For W=1 ladder is ~x2 faster\n        return this.wNAFUnsafe(W, this.getPrecomputes(W, point, transform), scalar, prev);\n    }\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    createCache(P, W) {\n        validateW(W, this.bits);\n        pointWindowSizes.set(P, W);\n        pointPrecomputes.delete(P);\n    }\n    hasCache(elm) {\n        return getW(elm) !== 1;\n    }\n}\n/**\n * Endomorphism-specific multiplication for Koblitz curves.\n * Cost: 128 dbl, 0-256 adds.\n */\nexport function mulEndoUnsafe(Point, point, k1, k2) {\n    let acc = point;\n    let p1 = Point.ZERO;\n    let p2 = Point.ZERO;\n    while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n)\n            p1 = p1.add(acc);\n        if (k2 & _1n)\n            p2 = p2.add(acc);\n        acc = acc.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n    }\n    return { p1, p2 };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka secret keys / bigints)\n */\nexport function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    const plength = points.length;\n    const slength = scalars.length;\n    if (plength !== slength)\n        throw new Error('arrays of points and scalars must have equal length');\n    // if (plength === 0) throw new Error('array must be of length >= 2');\n    const zero = c.ZERO;\n    const wbits = bitLen(BigInt(plength));\n    let windowSize = 1; // bits\n    if (wbits > 12)\n        windowSize = wbits - 3;\n    else if (wbits > 4)\n        windowSize = wbits - 2;\n    else if (wbits > 0)\n        windowSize = 2;\n    const MASK = bitMask(windowSize);\n    const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n        buckets.fill(zero);\n        for (let j = 0; j < slength; j++) {\n            const scalar = scalars[j];\n            const wbits = Number((scalar >> BigInt(i)) & MASK);\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0)\n            for (let j = 0; j < windowSize; j++)\n                sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = bitMask(windowSize);\n    const tables = points.map((p) => {\n        const res = [];\n        for (let i = 0, acc = p; i < tableSize; i++) {\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars) => {\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length)\n            throw new Error('array of scalars must be smaller than array of points');\n        let res = zero;\n        for (let i = 0; i < chunks; i++) {\n            // No need to double if accumulator is still zero.\n            if (res !== zero)\n                for (let j = 0; j < windowSize; j++)\n                    res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for (let j = 0; j < scalars.length; j++) {\n                const n = scalars[j];\n                const curr = Number((n >> shiftBy) & MASK);\n                if (!curr)\n                    continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\n// TODO: remove\n/** @deprecated */\nexport function validateBasic(curve) {\n    validateField(curve.Fp);\n    validateObject(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...nLength(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\nfunction createField(order, field, isLE) {\n    if (field) {\n        if (field.ORDER !== order)\n            throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n        validateField(field);\n        return field;\n    }\n    else {\n        return Field(order, { isLE });\n    }\n}\n/** Validates CURVE opts and creates fields */\nexport function _createCurveFields(type, CURVE, curveOpts = {}, FpFnLE) {\n    if (FpFnLE === undefined)\n        FpFnLE = type === 'edwards';\n    if (!CURVE || typeof CURVE !== 'object')\n        throw new Error(`expected valid ${type} CURVE object`);\n    for (const p of ['p', 'n', 'h']) {\n        const val = CURVE[p];\n        if (!(typeof val === 'bigint' && val > _0n))\n            throw new Error(`CURVE.${p} must be positive bigint`);\n    }\n    const Fp = createField(CURVE.p, curveOpts.Fp, FpFnLE);\n    const Fn = createField(CURVE.n, curveOpts.Fn, FpFnLE);\n    const _b = type === 'weierstrass' ? 'b' : 'd';\n    const params = ['Gx', 'Gy', 'a', _b];\n    for (const p of params) {\n        // @ts-ignore\n        if (!Fp.isValid(CURVE[p]))\n            throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n    }\n    CURVE = Object.freeze(Object.assign({}, CURVE));\n    return { CURVE, Fp, Fn };\n}\n//# sourceMappingURL=curve.js.map","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac as nobleHmac } from '@noble/hashes/hmac.js';\nimport { ahash } from '@noble/hashes/utils';\nimport { _validateObject, _abool2 as abool, _abytes2 as abytes, aInRange, bitLen, bitMask, bytesToHex, bytesToNumberBE, concatBytes, createHmacDrbg, ensureBytes, hexToBytes, inRange, isBytes, memoized, numberToHexUnpadded, randomBytes as randomBytesWeb, } from \"../utils.js\";\nimport { _createCurveFields, mulEndoUnsafe, negateCt, normalizeZ, pippenger, wNAF, } from \"./curve.js\";\nimport { Field, FpInvertBatch, getMinHashLength, mapHashToField, nLength, validateField, } from \"./modular.js\";\n// We construct basis in such way that den is always positive and equals n, but num sign depends on basis (not on secret value)\nconst divNearest = (num, den) => (num + (num >= 0 ? den : -den) / _2n) / den;\n/**\n * Splits scalar for GLV endomorphism.\n */\nexport function _splitEndoScalar(k, basis, n) {\n    // Split scalar into two such that part is ~half bits: `abs(part) < sqrt(N)`\n    // Since part can be negative, we need to do this on point.\n    // TODO: verifyScalar function which consumes lambda\n    const [[a1, b1], [a2, b2]] = basis;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    // |k1|/|k2| is < sqrt(N), but can be negative.\n    // If we do `k1 mod N`, we'll get big scalar (`> sqrt(N)`): so, we do cheaper negation instead.\n    let k1 = k - c1 * a1 - c2 * a2;\n    let k2 = -c1 * b1 - c2 * b2;\n    const k1neg = k1 < _0n;\n    const k2neg = k2 < _0n;\n    if (k1neg)\n        k1 = -k1;\n    if (k2neg)\n        k2 = -k2;\n    // Double check that resulting scalar less than half bits of N: otherwise wNAF will fail.\n    // This should only happen on wrong basises. Also, math inside is too complex and I don't trust it.\n    const MAX_NUM = bitMask(Math.ceil(bitLen(n) / 2)) + _1n; // Half bits of N\n    if (k1 < _0n || k1 >= MAX_NUM || k2 < _0n || k2 >= MAX_NUM) {\n        throw new Error('splitScalar (endomorphism): failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction validateSigFormat(format) {\n    if (!['compact', 'recovered', 'der'].includes(format))\n        throw new Error('Signature format must be \"compact\", \"recovered\", or \"der\"');\n    return format;\n}\nfunction validateSigOpts(opts, def) {\n    const optsn = {};\n    for (let optName of Object.keys(def)) {\n        // @ts-ignore\n        optsn[optName] = opts[optName] === undefined ? def[optName] : opts[optName];\n    }\n    abool(optsn.lowS, 'lowS');\n    abool(optsn.prehash, 'prehash');\n    if (optsn.format !== undefined)\n        validateSigFormat(optsn.format);\n    return optsn;\n}\nexport class DERErr extends Error {\n    constructor(m = '') {\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data) => {\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length & 1)\n                throw new E('tlv.encode: unpadded data');\n            const dataLen = data.length / 2;\n            const len = numberToHexUnpadded(dataLen);\n            if ((len.length / 2) & 128)\n                throw new E('tlv.encode: long form length too big');\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? numberToHexUnpadded((len.length / 2) | 128) : '';\n            const t = numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode(tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256)\n                throw new E('tlv.encode: wrong tag');\n            if (data.length < 2 || data[pos++] !== tag)\n                throw new E('tlv.decode: wrong tlv');\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong)\n                length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen)\n                    throw new E('tlv.decode(long): indefinite length not supported');\n                if (lenLen > 4)\n                    throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen)\n                    throw new E('tlv.decode: length bytes not complete');\n                if (lengthBytes[0] === 0)\n                    throw new E('tlv.decode(long): zero leftmost byte');\n                for (const b of lengthBytes)\n                    length = (length << 8) | b;\n                pos += lenLen;\n                if (length < 128)\n                    throw new E('tlv.decode(long): not minimal encoding');\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length)\n                throw new E('tlv.decode: wrong value length');\n            return { v, l: data.subarray(pos + length) };\n        },\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode(num) {\n            const { Err: E } = DER;\n            if (num < _0n)\n                throw new E('integer: negative integers are not allowed');\n            let hex = numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 0b1000)\n                hex = '00' + hex;\n            if (hex.length & 1)\n                throw new E('unexpected DER parsing assertion: unpadded hex');\n            return hex;\n        },\n        decode(data) {\n            const { Err: E } = DER;\n            if (data[0] & 128)\n                throw new E('invalid signature integer: negative');\n            if (data[0] === 0x00 && !(data[1] & 128))\n                throw new E('invalid signature integer: unnecessary leading zero');\n            return bytesToNumberBE(data);\n        },\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = ensureBytes('signature', hex);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length)\n            throw new E('invalid signature: left bytes after parsing');\n        return { r: int.decode(rBytes), s: int.decode(sBytes) };\n    },\n    hexFromSig(sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nexport function _normFnElement(Fn, key) {\n    const { BYTES: expected } = Fn;\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else {\n        let bytes = ensureBytes('private key', key);\n        try {\n            num = Fn.fromBytes(bytes);\n        }\n        catch (error) {\n            throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n        }\n    }\n    if (!Fn.isValidNot0(num))\n        throw new Error('invalid private key: out of range [1..N-1]');\n    return num;\n}\n/**\n * Creates weierstrass Point constructor, based on specified curve options.\n *\n * @example\n```js\nconst opts = {\n  p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\n  n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n  h: BigInt(1),\n  a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\n  b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\n  Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n  Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n};\nconst p256_Point = weierstrass(opts);\n```\n */\nexport function weierstrassN(params, extraOpts = {}) {\n    const validated = _createCurveFields('weierstrass', params, extraOpts);\n    const { Fp, Fn } = validated;\n    let CURVE = validated.CURVE;\n    const { h: cofactor, n: CURVE_ORDER } = CURVE;\n    _validateObject(extraOpts, {}, {\n        allowInfinityPoint: 'boolean',\n        clearCofactor: 'function',\n        isTorsionFree: 'function',\n        fromBytes: 'function',\n        toBytes: 'function',\n        endo: 'object',\n        wrapPrivateKey: 'boolean',\n    });\n    const { endo } = extraOpts;\n    if (endo) {\n        // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n        if (!Fp.is0(CURVE.a) || typeof endo.beta !== 'bigint' || !Array.isArray(endo.basises)) {\n            throw new Error('invalid endo: expected \"beta\": bigint and \"basises\": array');\n        }\n    }\n    const lengths = getWLengths(Fp, Fn);\n    function assertCompressionIsSupported() {\n        if (!Fp.isOdd)\n            throw new Error('compression is not supported: Field does not have .isOdd()');\n    }\n    // Implements IEEE P1363 point encoding\n    function pointToBytes(_c, point, isCompressed) {\n        const { x, y } = point.toAffine();\n        const bx = Fp.toBytes(x);\n        abool(isCompressed, 'isCompressed');\n        if (isCompressed) {\n            assertCompressionIsSupported();\n            const hasEvenY = !Fp.isOdd(y);\n            return concatBytes(pprefix(hasEvenY), bx);\n        }\n        else {\n            return concatBytes(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n        }\n    }\n    function pointFromBytes(bytes) {\n        abytes(bytes, undefined, 'Point');\n        const { publicKey: comp, publicKeyUncompressed: uncomp } = lengths; // e.g. for 32-byte: 33, 65\n        const length = bytes.length;\n        const head = bytes[0];\n        const tail = bytes.subarray(1);\n        // No actual validation is done here: use .assertValidity()\n        if (length === comp && (head === 0x02 || head === 0x03)) {\n            const x = Fp.fromBytes(tail);\n            if (!Fp.isValid(x))\n                throw new Error('bad point: is not on curve, wrong x');\n            const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n            let y;\n            try {\n                y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n            }\n            catch (sqrtError) {\n                const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n                throw new Error('bad point: is not on curve, sqrt error' + err);\n            }\n            assertCompressionIsSupported();\n            const isYOdd = Fp.isOdd(y); // (y & _1n) === _1n;\n            const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n            if (isHeadOdd !== isYOdd)\n                y = Fp.neg(y);\n            return { x, y };\n        }\n        else if (length === uncomp && head === 0x04) {\n            // TODO: more checks\n            const L = Fp.BYTES;\n            const x = Fp.fromBytes(tail.subarray(0, L));\n            const y = Fp.fromBytes(tail.subarray(L, L * 2));\n            if (!isValidXY(x, y))\n                throw new Error('bad point: is not on curve');\n            return { x, y };\n        }\n        else {\n            throw new Error(`bad point: got length ${length}, expected compressed=${comp} or uncompressed=${uncomp}`);\n        }\n    }\n    const encodePoint = extraOpts.toBytes || pointToBytes;\n    const decodePoint = extraOpts.fromBytes || pointFromBytes;\n    function weierstrassEquation(x) {\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x² * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, CURVE.a)), CURVE.b); // x³ + a * x + b\n    }\n    // TODO: move top-level\n    /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n    function isValidXY(x, y) {\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        return Fp.eql(left, right);\n    }\n    // Validate whether the passed curve params are valid.\n    // Test 1: equation y² = x³ + ax + b should work for generator point.\n    if (!isValidXY(CURVE.Gx, CURVE.Gy))\n        throw new Error('bad curve params: generator point');\n    // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n    // Guarantees curve is genus-1, smooth (non-singular).\n    const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n    const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n    if (Fp.is0(Fp.add(_4a3, _27b2)))\n        throw new Error('bad curve params: a or b');\n    /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n    function acoord(title, n, banZero = false) {\n        if (!Fp.isValid(n) || (banZero && Fp.is0(n)))\n            throw new Error(`bad point coordinate ${title}`);\n        return n;\n    }\n    function aprjpoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    function splitEndoScalarN(k) {\n        if (!endo || !endo.basises)\n            throw new Error('no endo');\n        return _splitEndoScalar(k, endo.basises, Fn.ORDER);\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n    const toAffineMemo = memoized((p, iz) => {\n        const { X, Y, Z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(Z, Fp.ONE))\n            return { x: X, y: Y };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null)\n            iz = is0 ? Fp.ONE : Fp.inv(Z);\n        const x = Fp.mul(X, iz);\n        const y = Fp.mul(Y, iz);\n        const zz = Fp.mul(Z, iz);\n        if (is0)\n            return { x: Fp.ZERO, y: Fp.ZERO };\n        if (!Fp.eql(zz, Fp.ONE))\n            throw new Error('invZ was invalid');\n        return { x, y };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = memoized((p) => {\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (extraOpts.allowInfinityPoint && !Fp.is0(p.Y))\n                return;\n            throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        if (!Fp.isValid(x) || !Fp.isValid(y))\n            throw new Error('bad point: x or y not field elements');\n        if (!isValidXY(x, y))\n            throw new Error('bad point: equation left != right');\n        if (!p.isTorsionFree())\n            throw new Error('bad point: not in prime-order subgroup');\n        return true;\n    });\n    function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {\n        k2p = new Point(Fp.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);\n        k1p = negateCt(k1neg, k1p);\n        k2p = negateCt(k2neg, k2p);\n        return k1p.add(k2p);\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n     * Default Point works in 2d / affine coordinates: (x, y).\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n        constructor(X, Y, Z) {\n            this.X = acoord('x', X);\n            this.Y = acoord('y', Y, true);\n            this.Z = acoord('z', Z);\n            Object.freeze(this);\n        }\n        static CURVE() {\n            return CURVE;\n        }\n        /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n            if (Fp.is0(x) && Fp.is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        static fromBytes(bytes) {\n            const P = Point.fromAffine(decodePoint(abytes(bytes, undefined, 'point')));\n            P.assertValidity();\n            return P;\n        }\n        static fromHex(hex) {\n            return Point.fromBytes(ensureBytes('pointHex', hex));\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         *\n         * @param windowSize\n         * @param isLazy true will defer table computation until the first multiplication\n         * @returns\n         */\n        precompute(windowSize = 8, isLazy = true) {\n            wnaf.createCache(this, windowSize);\n            if (!isLazy)\n                this.multiply(_3n); // random number\n            return this;\n        }\n        // TODO: return `this`\n        /** A point on curve is valid if it conforms to equation. */\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (!Fp.isOdd)\n                throw new Error(\"Field doesn't support isOdd\");\n            return !Fp.isOdd(y);\n        }\n        /** Compare one point to another. */\n        equals(other) {\n            aprjpoint(other);\n            const { X: X1, Y: Y1, Z: Z1 } = this;\n            const { X: X2, Y: Y2, Z: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n        negate() {\n            return new Point(this.X, Fp.neg(this.Y), this.Z);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { X: X1, Y: Y1, Z: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            aprjpoint(other);\n            const { X: X1, Y: Y1, Z: Z1 } = this;\n            const { X: X2, Y: Y2, Z: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            const { endo } = extraOpts;\n            if (!Fn.isValidNot0(scalar))\n                throw new Error('invalid scalar: out of range'); // 0 is invalid\n            let point, fake; // Fake point is used to const-time mult\n            const mul = (n) => wnaf.cached(this, n, (p) => normalizeZ(Point, p));\n            /** See docs for {@link EndomorphismOpts} */\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(scalar);\n                const { p: k1p, f: k1f } = mul(k1);\n                const { p: k2p, f: k2f } = mul(k2);\n                fake = k1f.add(k2f);\n                point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n            }\n            else {\n                const { p, f } = mul(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return normalizeZ(Point, [point, fake])[0];\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed secret key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(sc) {\n            const { endo } = extraOpts;\n            const p = this;\n            if (!Fn.isValid(sc))\n                throw new Error('invalid scalar: out of range'); // 0 is valid\n            if (sc === _0n || p.is0())\n                return Point.ZERO;\n            if (sc === _1n)\n                return p; // fast-path\n            if (wnaf.hasCache(this))\n                return this.multiply(sc);\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(sc);\n                const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2); // 30% faster vs wnaf.unsafe\n                return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n            }\n            else {\n                return wnaf.unsafe(p, sc);\n            }\n        }\n        multiplyAndAddUnsafe(Q, a, b) {\n            const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n            return sum.is0() ? undefined : sum;\n        }\n        /**\n         * Converts Projective point to affine (x, y) coordinates.\n         * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n         */\n        toAffine(invertedZ) {\n            return toAffineMemo(this, invertedZ);\n        }\n        /**\n         * Checks whether Point is free of torsion elements (is in prime subgroup).\n         * Always torsion-free for cofactor=1 curves.\n         */\n        isTorsionFree() {\n            const { isTorsionFree } = extraOpts;\n            if (cofactor === _1n)\n                return true;\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            return wnaf.unsafe(this, CURVE_ORDER).is0();\n        }\n        clearCofactor() {\n            const { clearCofactor } = extraOpts;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(cofactor);\n        }\n        isSmallOrder() {\n            // can we use this.clearCofactor()?\n            return this.multiplyUnsafe(cofactor).is0();\n        }\n        toBytes(isCompressed = true) {\n            abool(isCompressed, 'isCompressed');\n            this.assertValidity();\n            return encodePoint(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return bytesToHex(this.toBytes(isCompressed));\n        }\n        toString() {\n            return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n        }\n        // TODO: remove\n        get px() {\n            return this.X;\n        }\n        get py() {\n            return this.X;\n        }\n        get pz() {\n            return this.Z;\n        }\n        toRawBytes(isCompressed = true) {\n            return this.toBytes(isCompressed);\n        }\n        _setWindowSize(windowSize) {\n            this.precompute(windowSize);\n        }\n        static normalizeZ(points) {\n            return normalizeZ(Point, points);\n        }\n        static msm(points, scalars) {\n            return pippenger(Point, Fn, points, scalars);\n        }\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(_normFnElement(Fn, privateKey));\n        }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // math field\n    Point.Fp = Fp;\n    // scalar field\n    Point.Fn = Fn;\n    const bits = Fn.BITS;\n    const wnaf = new wNAF(Point, extraOpts.endo ? Math.ceil(bits / 2) : bits);\n    Point.BASE.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    return Point;\n}\n// Points start with byte 0x02 when y is even; otherwise 0x03\nfunction pprefix(hasEvenY) {\n    return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n    validateField(Fp);\n    const { A, B, Z } = opts;\n    if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n    if (!Fp.isOdd)\n        throw new Error('Field does not have .isOdd()');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        const tv4_inv = FpInvertBatch(Fp, [tv4], true)[0];\n        x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\nfunction getWLengths(Fp, Fn) {\n    return {\n        secretKey: Fn.BYTES,\n        publicKey: 1 + Fp.BYTES,\n        publicKeyUncompressed: 1 + 2 * Fp.BYTES,\n        publicKeyHasPrefix: true,\n        signature: 2 * Fn.BYTES,\n    };\n}\n/**\n * Sometimes users only need getPublicKey, getSharedSecret, and secret key handling.\n * This helper ensures no signature functionality is present. Less code, smaller bundle size.\n */\nexport function ecdh(Point, ecdhOpts = {}) {\n    const { Fn } = Point;\n    const randomBytes_ = ecdhOpts.randomBytes || randomBytesWeb;\n    const lengths = Object.assign(getWLengths(Point.Fp, Fn), { seed: getMinHashLength(Fn.ORDER) });\n    function isValidSecretKey(secretKey) {\n        try {\n            return !!_normFnElement(Fn, secretKey);\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    function isValidPublicKey(publicKey, isCompressed) {\n        const { publicKey: comp, publicKeyUncompressed } = lengths;\n        try {\n            const l = publicKey.length;\n            if (isCompressed === true && l !== comp)\n                return false;\n            if (isCompressed === false && l !== publicKeyUncompressed)\n                return false;\n            return !!Point.fromBytes(publicKey);\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    /**\n     * Produces cryptographically secure secret key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    function randomSecretKey(seed = randomBytes_(lengths.seed)) {\n        return mapHashToField(abytes(seed, lengths.seed, 'seed'), Fn.ORDER);\n    }\n    /**\n     * Computes public key for a secret key. Checks for validity of the secret key.\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(secretKey, isCompressed = true) {\n        return Point.BASE.multiply(_normFnElement(Fn, secretKey)).toBytes(isCompressed);\n    }\n    function keygen(seed) {\n        const secretKey = randomSecretKey(seed);\n        return { secretKey, publicKey: getPublicKey(secretKey) };\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        if (typeof item === 'bigint')\n            return false;\n        if (item instanceof Point)\n            return true;\n        const { secretKey, publicKey, publicKeyUncompressed } = lengths;\n        if (Fn.allowedLengths || secretKey === publicKey)\n            return undefined;\n        const l = ensureBytes('key', item).length;\n        return l === publicKey || l === publicKeyUncompressed;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from secret key A and public key B.\n     * Checks: 1) secret key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(secretKeyA, publicKeyB, isCompressed = true) {\n        if (isProbPub(secretKeyA) === true)\n            throw new Error('first arg must be private key');\n        if (isProbPub(publicKeyB) === false)\n            throw new Error('second arg must be public key');\n        const s = _normFnElement(Fn, secretKeyA);\n        const b = Point.fromHex(publicKeyB); // checks for being on-curve\n        return b.multiply(s).toBytes(isCompressed);\n    }\n    const utils = {\n        isValidSecretKey,\n        isValidPublicKey,\n        randomSecretKey,\n        // TODO: remove\n        isValidPrivateKey: isValidSecretKey,\n        randomPrivateKey: randomSecretKey,\n        normPrivateKeyToScalar: (key) => _normFnElement(Fn, key),\n        precompute(windowSize = 8, point = Point.BASE) {\n            return point.precompute(windowSize, false);\n        },\n    };\n    return Object.freeze({ getPublicKey, getSharedSecret, keygen, Point, utils, lengths });\n}\n/**\n * Creates ECDSA signing interface for given elliptic curve `Point` and `hash` function.\n * We need `hash` for 2 features:\n * 1. Message prehash-ing. NOT used if `sign` / `verify` are called with `prehash: false`\n * 2. k generation in `sign`, using HMAC-drbg(hash)\n *\n * ECDSAOpts are only rarely needed.\n *\n * @example\n * ```js\n * const p256_Point = weierstrass(...);\n * const p256_sha256 = ecdsa(p256_Point, sha256);\n * const p256_sha224 = ecdsa(p256_Point, sha224);\n * const p256_sha224_r = ecdsa(p256_Point, sha224, { randomBytes: (length) => { ... } });\n * ```\n */\nexport function ecdsa(Point, hash, ecdsaOpts = {}) {\n    ahash(hash);\n    _validateObject(ecdsaOpts, {}, {\n        hmac: 'function',\n        lowS: 'boolean',\n        randomBytes: 'function',\n        bits2int: 'function',\n        bits2int_modN: 'function',\n    });\n    const randomBytes = ecdsaOpts.randomBytes || randomBytesWeb;\n    const hmac = ecdsaOpts.hmac ||\n        ((key, ...msgs) => nobleHmac(hash, key, concatBytes(...msgs)));\n    const { Fp, Fn } = Point;\n    const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;\n    const { keygen, getPublicKey, getSharedSecret, utils, lengths } = ecdh(Point, ecdsaOpts);\n    const defaultSigOpts = {\n        prehash: false,\n        lowS: typeof ecdsaOpts.lowS === 'boolean' ? ecdsaOpts.lowS : false,\n        format: undefined, //'compact' as ECDSASigFormat,\n        extraEntropy: false,\n    };\n    const defaultSigOpts_format = 'compact';\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function validateRS(title, num) {\n        if (!Fn.isValidNot0(num))\n            throw new Error(`invalid signature ${title}: out of range 1..Point.Fn.ORDER`);\n        return num;\n    }\n    function validateSigLength(bytes, format) {\n        validateSigFormat(format);\n        const size = lengths.signature;\n        const sizer = format === 'compact' ? size : format === 'recovered' ? size + 1 : undefined;\n        return abytes(bytes, sizer, `${format} signature`);\n    }\n    /**\n     * ECDSA signature with its (r, s) properties. Supports compact, recovered & DER representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = validateRS('r', r); // r in [1..N-1];\n            this.s = validateRS('s', s); // s in [1..N-1];\n            if (recovery != null)\n                this.recovery = recovery;\n            Object.freeze(this);\n        }\n        static fromBytes(bytes, format = defaultSigOpts_format) {\n            validateSigLength(bytes, format);\n            let recid;\n            if (format === 'der') {\n                const { r, s } = DER.toSig(abytes(bytes));\n                return new Signature(r, s);\n            }\n            if (format === 'recovered') {\n                recid = bytes[0];\n                format = 'compact';\n                bytes = bytes.subarray(1);\n            }\n            const L = Fn.BYTES;\n            const r = bytes.subarray(0, L);\n            const s = bytes.subarray(L, L * 2);\n            return new Signature(Fn.fromBytes(r), Fn.fromBytes(s), recid);\n        }\n        static fromHex(hex, format) {\n            return this.fromBytes(hexToBytes(hex), format);\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(messageHash) {\n            const FIELD_ORDER = Fp.ORDER;\n            const { r, s, recovery: rec } = this;\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            // ECDSA recovery is hard for cofactor > 1 curves.\n            // In sign, `r = q.x mod n`, and here we recover q.x from r.\n            // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n            // However, for cofactor>1, r+n may not get q.x:\n            // r+n*i would need to be done instead where i is unknown.\n            // To easily get i, we either need to:\n            // a. increase amount of valid recid values (4, 5...); OR\n            // b. prohibit non-prime-order signatures (recid > 1).\n            const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n            if (hasCofactor && rec > 1)\n                throw new Error('recovery id is ambiguous for h>1 curve');\n            const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n            if (!Fp.isValid(radj))\n                throw new Error('recovery id 2 or 3 invalid');\n            const x = Fp.toBytes(radj);\n            const R = Point.fromBytes(concatBytes(pprefix((rec & 1) === 0), x));\n            const ir = Fn.inv(radj); // r^-1\n            const h = bits2int_modN(ensureBytes('msgHash', messageHash)); // Truncate hash\n            const u1 = Fn.create(-h * ir); // -hr^-1\n            const u2 = Fn.create(s * ir); // sr^-1\n            // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n            const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n            if (Q.is0())\n                throw new Error('point at infinify');\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        toBytes(format = defaultSigOpts_format) {\n            validateSigFormat(format);\n            if (format === 'der')\n                return hexToBytes(DER.hexFromSig(this));\n            const r = Fn.toBytes(this.r);\n            const s = Fn.toBytes(this.s);\n            if (format === 'recovered') {\n                if (this.recovery == null)\n                    throw new Error('recovery bit must be present');\n                return concatBytes(Uint8Array.of(this.recovery), r, s);\n            }\n            return concatBytes(r, s);\n        }\n        toHex(format) {\n            return bytesToHex(this.toBytes(format));\n        }\n        // TODO: remove\n        assertValidity() { }\n        static fromCompact(hex) {\n            return Signature.fromBytes(ensureBytes('sig', hex), 'compact');\n        }\n        static fromDER(hex) {\n            return Signature.fromBytes(ensureBytes('sig', hex), 'der');\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n        }\n        toDERRawBytes() {\n            return this.toBytes('der');\n        }\n        toDERHex() {\n            return bytesToHex(this.toBytes('der'));\n        }\n        toCompactRawBytes() {\n            return this.toBytes('compact');\n        }\n        toCompactHex() {\n            return bytesToHex(this.toBytes('compact'));\n        }\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = ecdsaOpts.bits2int ||\n        function bits2int_def(bytes) {\n            // Our custom check \"just in case\", for protection against DoS\n            if (bytes.length > 8192)\n                throw new Error('input is too large');\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = ecdsaOpts.bits2int_modN ||\n        function bits2int_modN_def(bytes) {\n            return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // Pads output with zero as per spec\n    const ORDER_MASK = bitMask(fnBits);\n    /** Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`. */\n    function int2octets(num) {\n        // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n        aInRange('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n        return Fn.toBytes(num);\n    }\n    function validateMsgAndHash(message, prehash) {\n        abytes(message, undefined, 'message');\n        return prehash ? abytes(hash(message), undefined, 'prehashed message') : message;\n    }\n    /**\n     * Steps A, D of RFC6979 3.2.\n     * Creates RFC6979 seed; converts msg/privKey to numbers.\n     * Used only in sign, not in verify.\n     *\n     * Warning: we cannot assume here that message has same amount of bytes as curve order,\n     * this will be invalid at least for P521. Also it can be bigger for P224 + SHA256.\n     */\n    function prepSig(message, privateKey, opts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { lowS, prehash, extraEntropy } = validateSigOpts(opts, defaultSigOpts);\n        message = validateMsgAndHash(message, prehash); // RFC6979 3.2 A: h1 = H(m)\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(message);\n        const d = _normFnElement(Fn, privateKey); // validate secret key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (extraEntropy != null && extraEntropy !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            // gen random bytes OR pass as-is\n            const e = extraEntropy === true ? randomBytes(lengths.secretKey) : extraEntropy;\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n        }\n        const seed = concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        // To transform k => Signature:\n        // q = k⋅G\n        // r = q.x mod n\n        // s = k^-1(m + rd) mod n\n        // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n        // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n        // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            // Important: all mod() calls here must be done over N\n            const k = bits2int(kBytes); // mod n, not mod p\n            if (!Fn.isValidNot0(k))\n                return; // Valid scalars (including k) must be in 1..N-1\n            const ik = Fn.inv(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = k⋅G\n            const r = Fn.create(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = Fn.neg(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    /**\n     * Signs message hash with a secret key.\n     *\n     * ```\n     * sign(m, d) where\n     *   k = rfc6979_hmac_drbg(m, d)\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr) / k mod n\n     * ```\n     */\n    function sign(message, secretKey, opts = {}) {\n        message = ensureBytes('message', message);\n        const { seed, k2sig } = prepSig(message, secretKey, opts); // Steps A, D of RFC6979 3.2.\n        const drbg = createHmacDrbg(hash.outputLen, Fn.BYTES, hmac);\n        const sig = drbg(seed, k2sig); // Steps B, C, D, E, F, G\n        return sig;\n    }\n    function tryParsingSig(sg) {\n        // Try to deduce format\n        let sig = undefined;\n        const isHex = typeof sg === 'string' || isBytes(sg);\n        const isObj = !isHex &&\n            sg !== null &&\n            typeof sg === 'object' &&\n            typeof sg.r === 'bigint' &&\n            typeof sg.s === 'bigint';\n        if (!isHex && !isObj)\n            throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n        if (isObj) {\n            sig = new Signature(sg.r, sg.s);\n        }\n        else if (isHex) {\n            try {\n                sig = Signature.fromBytes(ensureBytes('sig', sg), 'der');\n            }\n            catch (derError) {\n                if (!(derError instanceof DER.Err))\n                    throw derError;\n            }\n            if (!sig) {\n                try {\n                    sig = Signature.fromBytes(ensureBytes('sig', sg), 'compact');\n                }\n                catch (error) {\n                    return false;\n                }\n            }\n        }\n        if (!sig)\n            return false;\n        return sig;\n    }\n    /**\n     * Verifies a signature against message and public key.\n     * Rejects lowS signatures by default: see {@link ECDSAVerifyOpts}.\n     * Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   u1 = hs^-1 mod n\n     *   u2 = rs^-1 mod n\n     *   R = u1⋅G + u2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, message, publicKey, opts = {}) {\n        const { lowS, prehash, format } = validateSigOpts(opts, defaultSigOpts);\n        publicKey = ensureBytes('publicKey', publicKey);\n        message = validateMsgAndHash(ensureBytes('message', message), prehash);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const sig = format === undefined\n            ? tryParsingSig(signature)\n            : Signature.fromBytes(ensureBytes('sig', signature), format);\n        if (sig === false)\n            return false;\n        try {\n            const P = Point.fromBytes(publicKey);\n            if (lowS && sig.hasHighS())\n                return false;\n            const { r, s } = sig;\n            const h = bits2int_modN(message); // mod n, not mod p\n            const is = Fn.inv(s); // s^-1 mod n\n            const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n            const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n            const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2)); // u1⋅G + u2⋅P\n            if (R.is0())\n                return false;\n            const v = Fn.create(R.x); // v = r.x mod n\n            return v === r;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    function recoverPublicKey(signature, message, opts = {}) {\n        const { prehash } = validateSigOpts(opts, defaultSigOpts);\n        message = validateMsgAndHash(message, prehash);\n        return Signature.fromBytes(signature, 'recovered').recoverPublicKey(message).toBytes();\n    }\n    return Object.freeze({\n        keygen,\n        getPublicKey,\n        getSharedSecret,\n        utils,\n        lengths,\n        Point,\n        sign,\n        verify,\n        recoverPublicKey,\n        Signature,\n        hash,\n    });\n}\n/** @deprecated use `weierstrass` in newer releases */\nexport function weierstrassPoints(c) {\n    const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    return _weierstrass_new_output_to_legacy(c, Point);\n}\nfunction _weierstrass_legacy_opts_to_new(c) {\n    const CURVE = {\n        a: c.a,\n        b: c.b,\n        p: c.Fp.ORDER,\n        n: c.n,\n        h: c.h,\n        Gx: c.Gx,\n        Gy: c.Gy,\n    };\n    const Fp = c.Fp;\n    let allowedLengths = c.allowedPrivateKeyLengths\n        ? Array.from(new Set(c.allowedPrivateKeyLengths.map((l) => Math.ceil(l / 2))))\n        : undefined;\n    const Fn = Field(CURVE.n, {\n        BITS: c.nBitLength,\n        allowedLengths: allowedLengths,\n        modFromBytes: c.wrapPrivateKey,\n    });\n    const curveOpts = {\n        Fp,\n        Fn,\n        allowInfinityPoint: c.allowInfinityPoint,\n        endo: c.endo,\n        isTorsionFree: c.isTorsionFree,\n        clearCofactor: c.clearCofactor,\n        fromBytes: c.fromBytes,\n        toBytes: c.toBytes,\n    };\n    return { CURVE, curveOpts };\n}\nfunction _ecdsa_legacy_opts_to_new(c) {\n    const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);\n    const ecdsaOpts = {\n        hmac: c.hmac,\n        randomBytes: c.randomBytes,\n        lowS: c.lowS,\n        bits2int: c.bits2int,\n        bits2int_modN: c.bits2int_modN,\n    };\n    return { CURVE, curveOpts, hash: c.hash, ecdsaOpts };\n}\nexport function _legacyHelperEquat(Fp, a, b) {\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x² * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n    }\n    return weierstrassEquation;\n}\nfunction _weierstrass_new_output_to_legacy(c, Point) {\n    const { Fp, Fn } = Point;\n    function isWithinCurveOrder(num) {\n        return inRange(num, _1n, Fn.ORDER);\n    }\n    const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n    return Object.assign({}, {\n        CURVE: c,\n        Point: Point,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar: (key) => _normFnElement(Fn, key),\n        weierstrassEquation,\n        isWithinCurveOrder,\n    });\n}\nfunction _ecdsa_new_output_to_legacy(c, _ecdsa) {\n    const Point = _ecdsa.Point;\n    return Object.assign({}, _ecdsa, {\n        ProjectivePoint: Point,\n        CURVE: Object.assign({}, c, nLength(Point.Fn.ORDER, Point.Fn.BITS)),\n    });\n}\n// _ecdsa_legacy\nexport function weierstrass(c) {\n    const { CURVE, curveOpts, hash, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    const signs = ecdsa(Point, hash, ecdsaOpts);\n    return _ecdsa_new_output_to_legacy(c, signs);\n}\n//# sourceMappingURL=weierstrass.js.map","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { weierstrass } from \"./abstract/weierstrass.js\";\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash) {\n    return { hash };\n}\n/** @deprecated use new `weierstrass()` and `ecdsa()` methods */\nexport function createCurve(curveDef, defHash) {\n    const create = (hash) => weierstrass({ ...curveDef, hash: hash });\n    return { ...create(defHash), create };\n}\n//# sourceMappingURL=_shortw_utils.js.map","/**\n * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha2.js';\nimport { randomBytes } from '@noble/hashes/utils.js';\nimport { createCurve } from \"./_shortw_utils.js\";\nimport { createHasher, isogenyMap, } from \"./abstract/hash-to-curve.js\";\nimport { Field, mapHashToField, mod, pow2 } from \"./abstract/modular.js\";\nimport { _normFnElement, mapToCurveSimpleSWU, } from \"./abstract/weierstrass.js\";\nimport { bytesToNumberBE, concatBytes, ensureBytes, inRange, numberToBytesBE, utf8ToBytes, } from \"./utils.js\";\n// Seems like generator was produced from some seed:\n// `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n// // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\nconst secp256k1_CURVE = {\n    p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: BigInt(1),\n    a: BigInt(0),\n    b: BigInt(7),\n    Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n    Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8'),\n};\nconst secp256k1_ENDO = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    basises: [\n        [BigInt('0x3086d221a7d46bcde86c90e49284eb15'), -BigInt('0xe4437ed6010e88286f547fa90abfe4c3')],\n        [BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'), BigInt('0x3086d221a7d46bcde86c90e49284eb15')],\n    ],\n};\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1_CURVE.p;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\n    const root = pow2(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fpk1 = Field(secp256k1_CURVE.p, { sqrt: sqrtMod });\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const { secretKey, publicKey } = secp256k1.keygen();\n * const msg = new TextEncoder().encode('hello');\n * const sig = secp256k1.sign(msg, secretKey);\n * const isValid = secp256k1.verify(sig, msg, publicKey) === true;\n * ```\n */\nexport const secp256k1 = createCurve({ ...secp256k1_CURVE, Fp: Fpk1, lowS: true, endo: secp256k1_ENDO }, sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = sha256(utf8ToBytes(tag));\n        tagP = concatBytes(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return sha256(concatBytes(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toBytes(true).slice(1);\nconst Pointk1 = /* @__PURE__ */ (() => secp256k1.Point)();\nconst hasEven = (y) => y % _2n === _0n;\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    const { Fn, BASE } = Pointk1;\n    const d_ = _normFnElement(Fn, priv);\n    const p = BASE.multiply(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = hasEven(p.y) ? d_ : Fn.neg(d_);\n    return { scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    const Fp = Fpk1;\n    if (!Fp.isValidNot0(x))\n        throw new Error('invalid x: Fail if x ≥ p');\n    const xx = Fp.create(x * x);\n    const c = Fp.create(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = Fp.sqrt(c); // Let y = c^(p+1)/4 mod p. Same as sqrt().\n    // Return the unique point P such that x(P) = x and\n    // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    if (!hasEven(y))\n        y = Fp.neg(y);\n    const p = Pointk1.fromAffine({ x, y });\n    p.assertValidity();\n    return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return Pointk1.Fn.create(num(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(secretKey) {\n    return schnorrGetExtPubKey(secretKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, secretKey, auxRand = randomBytes(32)) {\n    const { Fn } = Pointk1;\n    const m = ensureBytes('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(secretKey); // checks for isWithinCurveOrder\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = Fn.toBytes(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    // Let k' = int(rand) mod n. Fail if k' = 0. Let R = k'⋅G\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(rand);\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(Fn.toBytes(Fn.create(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const { Fn, BASE } = Pointk1;\n    const sig = ensureBytes('signature', signature, 64);\n    const m = ensureBytes('message', message);\n    const pub = ensureBytes('publicKey', publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!inRange(r, _1n, secp256k1_CURVE.p))\n            return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!inRange(s, _1n, secp256k1_CURVE.n))\n            return false;\n        // int(challenge(bytes(r)||bytes(P)||m))%n\n        const e = challenge(Fn.toBytes(r), pointToBytes(P), m);\n        // R = s⋅G - e⋅P, where -eP == (n-e)P\n        const R = BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(Fn.neg(e)));\n        const { x, y } = R.toAffine();\n        // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n        if (R.is0() || !hasEven(y) || x !== r)\n            return false;\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const { secretKey, publicKey } = schnorr.keygen();\n * // const publicKey = schnorr.getPublicKey(secretKey);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, secretKey);\n * const isValid = schnorr.verify(sig, msg, publicKey);\n * ```\n */\nexport const schnorr = /* @__PURE__ */ (() => {\n    const size = 32;\n    const seedLength = 48;\n    const randomSecretKey = (seed = randomBytes(seedLength)) => {\n        return mapHashToField(seed, secp256k1_CURVE.n);\n    };\n    // TODO: remove\n    secp256k1.utils.randomSecretKey;\n    function keygen(seed) {\n        const secretKey = randomSecretKey(seed);\n        return { secretKey, publicKey: schnorrGetPublicKey(secretKey) };\n    }\n    return {\n        keygen,\n        getPublicKey: schnorrGetPublicKey,\n        sign: schnorrSign,\n        verify: schnorrVerify,\n        Point: Pointk1,\n        utils: {\n            randomSecretKey: randomSecretKey,\n            randomPrivateKey: randomSecretKey,\n            taggedHash,\n            // TODO: remove\n            lift_x,\n            pointToBytes,\n            numberToBytesBE,\n            bytesToNumberBE,\n            mod,\n        },\n        lengths: {\n            secretKey: size,\n            publicKey: size,\n            publicKeyHasPrefix: false,\n            signature: size * 2,\n            seed: seedLength,\n        },\n    };\n})();\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fpk1, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n}))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\nexport const secp256k1_hasher = /* @__PURE__ */ (() => createHasher(secp256k1.Point, (scalars) => {\n    const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256,\n}))();\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\nexport const hashToCurve = /* @__PURE__ */ (() => secp256k1_hasher.hashToCurve)();\n/** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\nexport const encodeToCurve = /* @__PURE__ */ (() => secp256k1_hasher.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */\nimport { SHA224 as SHA224n, sha224 as sha224n, SHA256 as SHA256n, sha256 as sha256n, } from \"./sha2.js\";\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA256 = SHA256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha256 = sha256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA224 = SHA224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha224 = sha224n;\n//# sourceMappingURL=sha256.js.map","/**\n * RDX Recognition Derivatives Exchange\n * Core Cryptographic Primitives - TypeScript Implementation\n *\n * This module provides:\n * 1. Pedersen commitments (elliptic curve based)\n * 2. Shamir secret sharing (threshold cryptography)\n * 3. MPC protocol for secure computation\n * 4. Allocation algorithms\n */\n\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { randomBytes } from \"crypto\";\nimport secrets from \"secrets.js-grempe\";\nimport type {\n  Commitment,\n  Share,\n  AllocationResult,\n  AllocationOutput,\n  MPCShare,\n  AvailabilitySlot,\n  MutualDesire,\n  ProviderDesire,\n  SlotAllocationResult,\n} from \"./schemas.js\";\n\n// Re-export types\nexport type {\n  Commitment,\n  Share,\n  AllocationResult,\n  AllocationOutput,\n  MPCShare,\n  AvailabilitySlot,\n  MutualDesire,\n  ProviderDesire,\n  SlotAllocationResult,\n};\n\n// Filter function type\nexport type FilterPredicate = (\n  recipientId: string,\n  context: FilterContext\n) => boolean;\n\nexport interface FilterContext {\n  recipientMetadata?: Record<string, any>;\n  capacityMetadata?: Record<string, any>;\n}\n\n// ============================================================================\n// Constants\n// ============================================================================\n\n// Pedersen commitment generators\nconst G_PEDERSEN = secp256k1.ProjectivePoint.BASE;\n\n// Second generator H (derived using hash-to-curve)\n// H = hash_to_curve(\"RDX_Pedersen_H\")\nconst H_PEDERSEN_X = BigInt(\n  \"0x50929B74C1A04954B78B4B6035E97A5E078A5A0F28EC96D547BFEE9ACE803AC0\"\n);\nconst H_PEDERSEN_Y = BigInt(\n  \"0x31D3C6863973926E049E637CB1B5F40A36DAC28AF1766968C30C2313F3A38904\"\n);\nconst H_PEDERSEN = new secp256k1.ProjectivePoint(\n  H_PEDERSEN_X,\n  H_PEDERSEN_Y,\n  BigInt(1)\n);\n\n// ============================================================================\n// Pedersen Commitments\n// ============================================================================\n\n/**\n * Create a Pedersen commitment: C = value*G + randomness*H\n *\n * Properties:\n * - Computationally hiding: Cannot determine value without randomness\n * - Perfectly binding: Cannot open to two different values\n * - Homomorphic: C(v1) + C(v2) = C(v1 + v2)\n *\n * @param value - Value to commit (0-100 for percentages, scaled by 10000)\n * @param randomness - 32 bytes of randomness (generated if not provided)\n * @returns Commitment object with 64-byte value and 32-byte randomness\n */\nexport function commit(value: number, randomness?: Uint8Array): Commitment {\n  const rand = randomness || randomBytes(32);\n\n  if (rand.length !== 32) {\n    throw new Error(\"Randomness must be exactly 32 bytes\");\n  }\n\n  // Scale float to integer (0.01% precision for percentages)\n  const valueInt = BigInt(Math.floor(value * 10000));\n  const randInt = bytesToBigInt(rand);\n\n  // Compute C = valueInt * G + randInt * H\n  const gTerm = G_PEDERSEN.multiply(valueInt);\n  const hTerm = H_PEDERSEN.multiply(randInt);\n  const commitmentPoint = gTerm.add(hTerm);\n\n  // Serialize point as 64 bytes (x || y)\n  const affinePoint = commitmentPoint.toAffine();\n  const xBytes = bigIntToBytes(affinePoint.x, 32);\n  const yBytes = bigIntToBytes(affinePoint.y, 32);\n\n  const commitmentValue = new Uint8Array(64);\n  commitmentValue.set(xBytes, 0);\n  commitmentValue.set(yBytes, 32);\n\n  return {\n    value: commitmentValue,\n    randomness: new Uint8Array(\n      rand.buffer,\n      rand.byteOffset,\n      rand.byteLength\n    ) as Uint8Array<ArrayBuffer>,\n  };\n}\n\n/**\n * Verify a commitment opening\n *\n * @param commitment - The commitment to verify\n * @param value - The claimed value\n * @param randomness - The claimed randomness\n * @returns True if the opening is valid\n */\nexport function verifyCommitment(\n  commitment: Commitment,\n  value: number,\n  randomness: Uint8Array\n): boolean {\n  try {\n    const recomputed = commit(value, randomness);\n    return constantTimeEqual(commitment.value, recomputed.value);\n  } catch {\n    return false;\n  }\n}\n\n// ============================================================================\n// Shamir Secret Sharing\n// ============================================================================\n\nexport class SecretSharing {\n  private readonly threshold: number;\n\n  constructor(threshold: number) {\n    if (threshold < 2) {\n      throw new Error(\"Threshold must be at least 2\");\n    }\n    this.threshold = threshold;\n  }\n\n  /**\n   * Split a value into shares using Shamir secret sharing\n   *\n   * @param value - Value to share (will be scaled to integer)\n   * @param numShares - Total number of shares to create\n   * @returns Array of shares\n   */\n  share(value: number, numShares: number): Share[] {\n    if (numShares < this.threshold) {\n      throw new Error(`Need at least ${this.threshold} shares`);\n    }\n\n    // Scale to integer with 6 decimal precision\n    const valueInt = Math.floor(value * 1_000_000);\n    const valueHex = valueInt.toString(16).padStart(16, \"0\");\n\n    // Use secrets.js-grempe for proper Shamir sharing\n    const shareStrings = secrets.share(valueHex, numShares, this.threshold);\n\n    return shareStrings.map(\n      (shareStr: string, index: number): Share => ({\n        index: index + 1,\n        value: shareStr,\n      })\n    );\n  }\n\n  /**\n   * Reconstruct a value from shares\n   *\n   * @param shares - At least threshold shares\n   * @returns Reconstructed value\n   */\n  reconstruct(shares: Share[]): number {\n    if (shares.length < this.threshold) {\n      throw new Error(\n        `Insufficient shares: need ${this.threshold}, got ${shares.length}`\n      );\n    }\n\n    const shareStrings = shares.slice(0, this.threshold).map((s) => s.value);\n    const valueHex = secrets.combine(shareStrings);\n    const valueInt = parseInt(valueHex, 16);\n\n    return valueInt / 1_000_000;\n  }\n}\n\n// ============================================================================\n// MPC Protocol\n// ============================================================================\n\nexport class MPCProtocol {\n  private readonly numNodes: number;\n  private readonly secretSharing: SecretSharing;\n\n  constructor(numNodes: number = 3) {\n    if (numNodes < 3) {\n      throw new Error(\"MPC requires at least 3 nodes\");\n    }\n\n    this.numNodes = numNodes;\n    const threshold = Math.floor(numNodes / 2) + 1;\n    this.secretSharing = new SecretSharing(threshold);\n  }\n\n  /**\n   * Share a value across MPC nodes\n   */\n  secretShare(value: number, numShares: number): Share[] {\n    return this.secretSharing.share(value, numShares);\n  }\n\n  /**\n   * Reconstruct value from shares\n   */\n  reconstruct(shares: Share[]): number {\n    return this.secretSharing.reconstruct(shares);\n  }\n\n  /**\n   * Compute mutual recognition: MR = min(R[A][B], R[B][A])\n   *\n   * This is done securely using garbled circuits for the min operation\n   */\n  async computeMutualRecognition(\n    sharesA: Share[],\n    sharesB: Share[]\n  ): Promise<Share[]> {\n    // For simplicity, we reconstruct and compute min\n    // In production, this would use garbled circuits\n    const valueA = this.reconstruct(sharesA);\n    const valueB = this.reconstruct(sharesB);\n    const minValue = Math.min(valueA, valueB);\n\n    return this.secretShare(minValue, this.numNodes);\n  }\n\n  /**\n   * Secure minimum using garbled circuits\n   * NOTE: This is a simplified version. Full implementation would use\n   * the garbled circuits module for true secure computation.\n   */\n  async secureMin(sharesA: Share[], sharesB: Share[]): Promise<Share[]> {\n    return this.computeMutualRecognition(sharesA, sharesB);\n  }\n\n  /**\n   * Compute normalized allocation based on mutual recognition shares\n   *\n   * @param mrShares - Map of recipient IDs to their MR shares\n   * @param totalCapacity - Total capacity to allocate\n   * @param desires - Map of recipient IDs to desired amounts\n   * @returns Allocation results\n   */\n  computeNormalizedAllocation(\n    mrShares: Record<string, Share[]>,\n    totalCapacity: number,\n    desires: Record<string, number>\n  ): AllocationResult {\n    // Reconstruct all MR values\n    const mrValues: Record<string, number> = {};\n    for (const [recipientId, shares] of Object.entries(mrShares)) {\n      mrValues[recipientId] = this.reconstruct(shares);\n    }\n\n    // Filter recipients with positive MR\n    const validRecipients = Object.entries(mrValues).filter(([, mr]) => mr > 0);\n\n    if (validRecipients.length === 0) {\n      return {};\n    }\n\n    // Calculate total MR\n    const totalMR = validRecipients.reduce((sum, [, mr]) => sum + mr, 0);\n\n    // Initial proportional allocation\n    const allocations: Record<string, number> = {};\n    let remaining = totalCapacity;\n\n    for (const [recipientId, mr] of validRecipients) {\n      const proportionalShare = (mr / totalMR) * totalCapacity;\n      const desire = desires[recipientId] || 0;\n      const allocated = Math.min(proportionalShare, desire);\n\n      allocations[recipientId] = allocated;\n      remaining -= allocated;\n    }\n\n    // Redistribute remaining capacity (zero-waste)\n    if (remaining > 0.01) {\n      const unsatisfied = validRecipients.filter(([recipientId, mr]) => {\n        const allocated = allocations[recipientId];\n        const proportional = (mr / totalMR) * totalCapacity;\n        return allocated < proportional;\n      });\n\n      if (unsatisfied.length > 0) {\n        const unsatisfiedTotalMR = unsatisfied.reduce(\n          (sum, [, mr]) => sum + mr,\n          0\n        );\n\n        for (const [recipientId, mr] of unsatisfied) {\n          const extraShare = (mr / unsatisfiedTotalMR) * remaining;\n          allocations[recipientId] += extraShare;\n        }\n      }\n    }\n\n    return allocations;\n  }\n\n  /**\n   * Compute slot-based allocation with mutual desire and filters\n   * This is the complete, spec-compliant implementation\n   *\n   * @param slot - The availability slot to allocate\n   * @param mrShares - Map of recipient IDs to their MR shares\n   * @param recipientDesires - Map of recipient IDs to their desired amounts\n   * @param providerDesires - Map of recipient IDs to provider's offered amounts\n   * @param filterPredicate - Optional filter function for recipient eligibility\n   * @param filterContext - Context for filter evaluation\n   * @returns Detailed slot allocation result\n   */\n  computeSlotAllocation(\n    slot: AvailabilitySlot,\n    mrShares: Record<string, Share[]>,\n    recipientDesires: Record<string, number>,\n    providerDesires: Record<string, number>,\n    filterPredicate?: FilterPredicate,\n    filterContext?: FilterContext\n  ): SlotAllocationResult {\n    const timestamp = new Date().toISOString();\n\n    // Phase 1: Reconstruct all MR values\n    const mrValues: Record<string, number> = {};\n    for (const [recipientId, shares] of Object.entries(mrShares)) {\n      mrValues[recipientId] = this.reconstruct(shares);\n    }\n\n    // Phase 2: Apply filters to get specific shares\n    let filteredMRValues: Record<string, number> = {};\n\n    if (filterPredicate && filterContext) {\n      // Apply filter and normalize among filtered recipients\n      for (const [recipientId, mrValue] of Object.entries(mrValues)) {\n        if (mrValue > 0 && filterPredicate(recipientId, filterContext)) {\n          filteredMRValues[recipientId] = mrValue;\n        }\n      }\n    } else {\n      // No filter, use all recipients with positive MR\n      filteredMRValues = { ...mrValues };\n    }\n\n    // Filter only those with positive MR\n    const validRecipients = Object.entries(filteredMRValues).filter(\n      ([, mr]) => mr > 0\n    );\n\n    if (validRecipients.length === 0) {\n      // No valid recipients - return empty allocation\n      return {\n        slotId: slot.id,\n        totalQuantity: slot.quantity,\n        allocations: {},\n        unusedCapacity: slot.quantity,\n        mutualDesires: {},\n        normalizedShares: {},\n        redistributionAmounts: {},\n        timestamp,\n      };\n    }\n\n    // Phase 3: Calculate mutual desires\n    const mutualDesires: Record<\n      string,\n      { recipientDesire: number; providerDesire: number; mutual: number }\n    > = {};\n\n    for (const [recipientId] of validRecipients) {\n      const recipientDesire = recipientDesires[recipientId] || 0;\n      const providerDesire = providerDesires[recipientId] || 0;\n      const mutual = Math.min(recipientDesire, providerDesire);\n\n      if (mutual > 0) {\n        mutualDesires[recipientId] = {\n          recipientDesire,\n          providerDesire,\n          mutual,\n        };\n      }\n    }\n\n    // Filter to only mutually desiring recipients\n    const mutuallyDesiringRecipients = validRecipients.filter(\n      ([recipientId]) => (mutualDesires[recipientId]?.mutual || 0) > 0\n    );\n\n    if (mutuallyDesiringRecipients.length === 0) {\n      // No mutual desires - return empty allocation\n      return {\n        slotId: slot.id,\n        totalQuantity: slot.quantity,\n        allocations: {},\n        unusedCapacity: slot.quantity,\n        mutualDesires,\n        normalizedShares: {},\n        redistributionAmounts: {},\n        timestamp,\n      };\n    }\n\n    // Phase 4: Normalize MR shares among mutually desiring recipients\n    const totalMR = mutuallyDesiringRecipients.reduce(\n      (sum, [, mr]) => sum + mr,\n      0\n    );\n\n    const normalizedShares: Record<string, number> = {};\n    for (const [recipientId, mr] of mutuallyDesiringRecipients) {\n      normalizedShares[recipientId] = mr / totalMR;\n    }\n\n    // Phase 5: Initial proportional allocation constrained by mutual desire\n    const allocations: Record<string, number> = {};\n    let usedCapacity = 0;\n\n    for (const [recipientId, normalizedShare] of Object.entries(\n      normalizedShares\n    )) {\n      const rawAllocation = slot.quantity * normalizedShare;\n      const mutualDesire = mutualDesires[recipientId]?.mutual || 0;\n      const constrainedAllocation = Math.min(rawAllocation, mutualDesire);\n\n      if (constrainedAllocation > 0) {\n        allocations[recipientId] = constrainedAllocation;\n        usedCapacity += constrainedAllocation;\n      }\n    }\n\n    // Phase 6: Zero-waste redistribution\n    let unusedCapacity = slot.quantity - usedCapacity;\n    const redistributionAmounts: Record<string, number> = {};\n\n    if (unusedCapacity > 0.01) {\n      // Find unsatisfied recipients\n      const unsatisfiedRecipients = mutuallyDesiringRecipients.filter(\n        ([recipientId, mr]) => {\n          const allocated = allocations[recipientId] || 0;\n          const proportional = (mr / totalMR) * slot.quantity;\n          const mutualDesire = mutualDesires[recipientId]?.mutual || 0;\n          return allocated < Math.min(proportional, mutualDesire);\n        }\n      );\n\n      if (unsatisfiedRecipients.length > 0) {\n        const unsatisfiedTotalMR = unsatisfiedRecipients.reduce(\n          (sum, [, mr]) => sum + mr,\n          0\n        );\n\n        for (const [recipientId, mr] of unsatisfiedRecipients) {\n          const redistributionShare = mr / unsatisfiedTotalMR;\n          const redistributionAmount = unusedCapacity * redistributionShare;\n          const currentAllocation = allocations[recipientId] || 0;\n          const mutualDesire = mutualDesires[recipientId]?.mutual || 0;\n          const maxAdditional = mutualDesire - currentAllocation;\n          const actualRedistribution = Math.min(\n            redistributionAmount,\n            maxAdditional\n          );\n\n          if (actualRedistribution > 0) {\n            redistributionAmounts[recipientId] = actualRedistribution;\n            allocations[recipientId] = currentAllocation + actualRedistribution;\n            usedCapacity += actualRedistribution;\n          }\n        }\n\n        unusedCapacity = slot.quantity - usedCapacity;\n      }\n    }\n\n    return {\n      slotId: slot.id,\n      totalQuantity: slot.quantity,\n      allocations,\n      unusedCapacity,\n      mutualDesires,\n      normalizedShares,\n      redistributionAmounts,\n      timestamp,\n    };\n  }\n\n  /**\n   * Compute allocations across multiple slots\n   *\n   * @param slots - Array of availability slots\n   * @param mrShares - Map of recipient IDs to their MR shares\n   * @param recipientDesires - Map of recipient IDs to desired amounts per slot\n   * @param providerDesires - Map of recipient IDs to offered amounts per slot\n   * @param filterPredicate - Optional filter function\n   * @param filterContext - Context for filter evaluation\n   * @returns Array of slot allocation results\n   */\n  computeMultiSlotAllocation(\n    slots: AvailabilitySlot[],\n    mrShares: Record<string, Share[]>,\n    recipientDesires: Record<string, Record<string, number>>, // recipientId -> slotId -> amount\n    providerDesires: Record<string, Record<string, number>>, // recipientId -> slotId -> amount\n    filterPredicate?: FilterPredicate,\n    filterContext?: FilterContext\n  ): SlotAllocationResult[] {\n    const results: SlotAllocationResult[] = [];\n\n    for (const slot of slots) {\n      // Extract slot-specific desires\n      const slotRecipientDesires: Record<string, number> = {};\n      const slotProviderDesires: Record<string, number> = {};\n\n      for (const recipientId of Object.keys(mrShares)) {\n        slotRecipientDesires[recipientId] =\n          recipientDesires[recipientId]?.[slot.id] || 0;\n        slotProviderDesires[recipientId] =\n          providerDesires[recipientId]?.[slot.id] || 0;\n      }\n\n      const slotResult = this.computeSlotAllocation(\n        slot,\n        mrShares,\n        slotRecipientDesires,\n        slotProviderDesires,\n        filterPredicate,\n        filterContext\n      );\n\n      results.push(slotResult);\n    }\n\n    return results;\n  }\n}\n\n// ============================================================================\n// Utility Functions\n// ============================================================================\n\nfunction bytesToBigInt(bytes: Uint8Array): bigint {\n  let result = BigInt(0);\n  for (const byte of bytes) {\n    result = (result << BigInt(8)) | BigInt(byte);\n  }\n  return result;\n}\n\nfunction bigIntToBytes(value: bigint, length: number): Uint8Array {\n  const bytes = new Uint8Array(length);\n  let temp = value;\n\n  for (let i = length - 1; i >= 0; i--) {\n    bytes[i] = Number(temp & BigInt(0xff));\n    temp = temp >> BigInt(8);\n  }\n\n  return bytes;\n}\n\nfunction constantTimeEqual(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) {\n    diff |= a[i] ^ b[i];\n  }\n\n  return diff === 0;\n}\n\n// ============================================================================\n// TEE Simulator\n// ============================================================================\n\nexport class TEESimulator {\n  /**\n   * Simulate allocation computation in a Trusted Execution Environment\n   */\n  computeAllocationInEnclave(\n    recognitionCommitments: Array<{\n      from: string;\n      to: string;\n      commitment: Commitment;\n      value: number;\n      randomness: Uint8Array;\n    }>,\n    capacityTotal: number,\n    desires: Record<string, number>\n  ): AllocationOutput {\n    // Verify all commitments\n    for (const rec of recognitionCommitments) {\n      if (!verifyCommitment(rec.commitment, rec.value, rec.randomness)) {\n        throw new Error(`Invalid commitment from ${rec.from} to ${rec.to}`);\n      }\n    }\n\n    // Compute mutual recognition\n    const mrValues: Record<string, number> = {};\n    const participants = new Set<string>();\n\n    for (const rec of recognitionCommitments) {\n      participants.add(rec.from);\n      participants.add(rec.to);\n    }\n\n    // Build MR matrix (simplified - assumes pairwise commitments exist)\n    for (const rec of recognitionCommitments) {\n      const reverseRec = recognitionCommitments.find(\n        (r) => r.from === rec.to && r.to === rec.from\n      );\n\n      if (reverseRec) {\n        const mr = Math.min(rec.value, reverseRec.value);\n        mrValues[rec.to] = (mrValues[rec.to] || 0) + mr;\n      }\n    }\n\n    // Compute allocations\n    const totalMR = Object.values(mrValues).reduce((sum, mr) => sum + mr, 0);\n    const allocations: Array<{\n      recipientDid: string;\n      quantityAllocated: number;\n    }> = [];\n\n    if (totalMR > 0) {\n      for (const [recipientDid, mr] of Object.entries(mrValues)) {\n        const proportional = (mr / totalMR) * capacityTotal;\n        const desire = desires[recipientDid] || 0;\n        const allocated = Math.min(proportional, desire);\n\n        if (allocated > 0) {\n          allocations.push({\n            recipientDid,\n            quantityAllocated: allocated,\n          });\n        }\n      }\n    }\n\n    // Generate attestation\n    const attestationData = Buffer.from(\n      `RDX_Allocation_Enclave_v1:${allocations.length}:${capacityTotal}`\n    );\n    const attestationHash = sha256(attestationData);\n    const attestation = new Uint8Array(\n      attestationHash.buffer,\n      attestationHash.byteOffset,\n      attestationHash.byteLength\n    ) as Uint8Array<ArrayBuffer>;\n\n    return { allocations, attestation };\n  }\n}\n\n// ============================================================================\n// Additional Exports (aliases for convenience)\n// ============================================================================\n\nexport { commit as createCommitment, verifyCommitment as verify };\n","/**\n * Centralized Zod v4 Schemas\n * Single source of truth for all data shapes and validation\n */\n\nimport { z } from \"zod\";\n\n// ============================================================================\n// Primitive Schemas\n// ============================================================================\n\nexport const DIDSchema = z\n  .string()\n  .regex(/^did:[a-z0-9]+:.+/, \"Invalid DID format\")\n  .describe(\"Decentralized Identifier\");\n\nexport const PercentageSchema = z\n  .number()\n  .min(0, \"Percentage cannot be negative\")\n  .max(100, \"Percentage cannot exceed 100\")\n  .describe(\"Recognition percentage (0-100)\");\n\nexport const CapacityIDSchema = z\n  .string()\n  .regex(/^cap-[a-f0-9]{16}$/, \"Invalid capacity ID format\")\n  .describe(\"Capacity identifier\");\n\nexport const HexStringSchema = z\n  .string()\n  .regex(/^[a-f0-9]+$/i, \"Must be a hex string\");\n\nexport const Bytes32Schema = z\n  .instanceof(Uint8Array)\n  .refine((val) => val.length === 32, \"Must be exactly 32 bytes\");\n\nexport const Bytes64Schema = z\n  .instanceof(Uint8Array)\n  .refine((val) => val.length === 64, \"Must be exactly 64 bytes\");\n\n// ============================================================================\n// Cryptographic Schemas\n// ============================================================================\n\nexport const CommitmentSchema = z\n  .object({\n    value: Bytes64Schema.describe(\"EC point (x,y coordinates)\"),\n    randomness: Bytes32Schema.describe(\"Random blinding factor\"),\n  })\n  .strict()\n  .describe(\"Pedersen commitment\");\n\nexport type Commitment = z.infer<typeof CommitmentSchema>;\n\nexport const ShareSchema = z\n  .object({\n    index: z.number().int().positive().describe(\"Share index (1-based)\"),\n    value: HexStringSchema.describe(\"Share value as hex string\"),\n  })\n  .strict()\n  .describe(\"Shamir secret share\");\n\nexport type Share = z.infer<typeof ShareSchema>;\n\nexport const MPCShareSchema = z\n  .object({\n    shares: z.array(ShareSchema).min(1),\n  })\n  .strict()\n  .describe(\"MPC share bundle\");\n\nexport type MPCShare = z.infer<typeof MPCShareSchema>;\n\n// ============================================================================\n// Participant Schemas\n// ============================================================================\n\nexport const ParticipantSchema = z\n  .object({\n    did: DIDSchema,\n    name: z.string().min(1, \"Name cannot be empty\"),\n    publicKey: z.string().optional(),\n  })\n  .strict()\n  .describe(\"System participant\");\n\nexport type Participant = z.infer<typeof ParticipantSchema>;\n\nexport const RecognitionValueSchema = z\n  .object({\n    percentage: PercentageSchema,\n  })\n  .strict()\n  .describe(\"Recognition value\");\n\nexport type RecognitionValue = z.infer<typeof RecognitionValueSchema>;\n\nexport const MutualRecognitionSchema = z\n  .object({\n    participantA: DIDSchema,\n    participantB: DIDSchema,\n    value: PercentageSchema.describe(\"min(R[A][B], R[B][A])\"),\n  })\n  .strict()\n  .describe(\"Mutual recognition between two participants\");\n\nexport type MutualRecognition = z.infer<typeof MutualRecognitionSchema>;\n\n// ============================================================================\n// Capacity Schemas\n// ============================================================================\n\nexport const CapacityFiltersSchema = z\n  .record(z.string(), z.any())\n  .describe(\"Filters for recipient eligibility\");\n\n// Slot Schema - individual time or resource slot\nexport const SlotIDSchema = z\n  .string()\n  .regex(/^slot-[a-f0-9]{16}$/, \"Invalid slot ID format\")\n  .describe(\"Slot identifier\");\n\nexport const AvailabilitySlotSchema = z\n  .object({\n    id: SlotIDSchema,\n    quantity: z.number().nonnegative(\"Slot quantity cannot be negative\"),\n    metadata: z.record(z.string(), z.any()).optional(),\n    // Optional timing fields\n    startDate: z.string().datetime().optional(),\n    endDate: z.string().datetime().optional(),\n    recurrence: z.string().optional(),\n  })\n  .strict()\n  .describe(\"Availability slot within a capacity\");\n\nexport type AvailabilitySlot = z.infer<typeof AvailabilitySlotSchema>;\n\nexport const CapacitySchema = z\n  .object({\n    id: CapacityIDSchema,\n    providerDid: DIDSchema,\n    capacityType: z.string().min(1, \"Capacity type cannot be empty\"),\n    totalQuantity: z.number().positive(\"Quantity must be positive\"),\n    unit: z.string().min(1, \"Unit cannot be empty\"),\n    filters: CapacityFiltersSchema.default({}),\n    availabilitySlots: z\n      .array(AvailabilitySlotSchema)\n      .default([])\n      .describe(\"Time or resource slots for allocation\"),\n  })\n  .strict()\n  .describe(\"Declared capacity\");\n\nexport type Capacity = z.infer<typeof CapacitySchema>;\n\n// ============================================================================\n// Desire Schemas\n// ============================================================================\n\nexport const DesireSchema = z\n  .object({\n    recipientDid: DIDSchema,\n    capacityId: CapacityIDSchema,\n    quantityDesired: z.number().positive(\"Desired quantity must be positive\"),\n    slotId: SlotIDSchema.optional().describe(\"Optional slot-specific desire\"),\n  })\n  .strict()\n  .describe(\"Recipient desire for capacity\");\n\nexport type Desire = z.infer<typeof DesireSchema>;\n\n// Mutual Desire - combines provider and recipient desires\nexport const MutualDesireSchema = z\n  .object({\n    recipientDid: DIDSchema,\n    capacityId: CapacityIDSchema,\n    slotId: SlotIDSchema.optional(),\n    recipientDesire: z.number().nonnegative(),\n    providerDesire: z.number().nonnegative(),\n    mutual: z.number().nonnegative().describe(\"min(provider, recipient)\"),\n  })\n  .strict()\n  .describe(\"Mutual desire between provider and recipient\");\n\nexport type MutualDesire = z.infer<typeof MutualDesireSchema>;\n\n// Provider Desire - how much provider wants to give to each recipient\nexport const ProviderDesireSchema = z\n  .object({\n    providerDid: DIDSchema,\n    recipientDid: DIDSchema,\n    capacityId: CapacityIDSchema,\n    slotId: SlotIDSchema.optional(),\n    quantityOffered: z\n      .number()\n      .nonnegative(\"Offered quantity cannot be negative\"),\n  })\n  .strict()\n  .describe(\"Provider's desire to allocate to specific recipient\");\n\nexport type ProviderDesire = z.infer<typeof ProviderDesireSchema>;\n\n// ============================================================================\n// Allocation Schemas\n// ============================================================================\n\nexport const AllocationSchema = z\n  .object({\n    capacityId: CapacityIDSchema,\n    slotId: SlotIDSchema.optional(),\n    recipientDid: DIDSchema,\n    quantityAllocated: z\n      .number()\n      .nonnegative(\"Allocated quantity cannot be negative\"),\n    proof: z.instanceof(Uint8Array).optional(),\n    confirmed: z.boolean().default(false),\n  })\n  .strict()\n  .describe(\"Computed allocation\");\n\nexport type Allocation = z.infer<typeof AllocationSchema>;\n\nexport const AllocationResultSchema = z\n  .record(DIDSchema, z.number().nonnegative())\n  .describe(\"Map of recipient DIDs to allocated quantities\");\n\nexport type AllocationResult = z.infer<typeof AllocationResultSchema>;\n\n// Slot-specific allocation result with full transparency\nexport const SlotAllocationResultSchema = z\n  .object({\n    slotId: SlotIDSchema,\n    totalQuantity: z.number().nonnegative(),\n    allocations: AllocationResultSchema,\n    unusedCapacity: z.number().nonnegative(),\n    mutualDesires: z.record(\n      DIDSchema,\n      z.object({\n        recipientDesire: z.number().nonnegative(),\n        providerDesire: z.number().nonnegative(),\n        mutual: z.number().nonnegative(),\n      })\n    ),\n    normalizedShares: z.record(DIDSchema, z.number().nonnegative()),\n    redistributionAmounts: z.record(DIDSchema, z.number().nonnegative()),\n    timestamp: z.string().datetime(),\n  })\n  .strict()\n  .describe(\"Complete slot allocation result with full transparency\");\n\nexport type SlotAllocationResult = z.infer<typeof SlotAllocationResultSchema>;\n\nexport const AllocationOutputSchema = z\n  .object({\n    allocations: z.array(\n      z.object({\n        recipientDid: DIDSchema,\n        quantityAllocated: z.number().nonnegative(),\n        slotId: SlotIDSchema.optional(),\n      })\n    ),\n    attestation: z.instanceof(Uint8Array).describe(\"TEE attestation\"),\n  })\n  .strict()\n  .describe(\"TEE allocation output\");\n\nexport type AllocationOutput = z.infer<typeof AllocationOutputSchema>;\n\n// ============================================================================\n// Configuration Schemas\n// ============================================================================\n\nexport const RDXConfigSchema = z\n  .object({\n    mpcNodes: z\n      .number()\n      .int()\n      .min(3, \"MPC requires at least 3 nodes\")\n      .default(3),\n    threshold: z\n      .number()\n      .int()\n      .min(2, \"Threshold must be at least 2\")\n      .optional(),\n    logLevel: z.enum([\"DEBUG\", \"INFO\", \"WARN\", \"ERROR\"]).default(\"INFO\"),\n  })\n  .strict()\n  .refine(\n    (data) => {\n      const threshold = data.threshold || Math.floor(data.mpcNodes / 2) + 1;\n      return threshold <= data.mpcNodes;\n    },\n    {\n      message: \"Threshold cannot exceed number of MPC nodes\",\n    }\n  )\n  .describe(\"RDX system configuration\");\n\nexport type RDXConfig = z.infer<typeof RDXConfigSchema>;\n\n// ============================================================================\n// Garbled Circuits Schemas\n// ============================================================================\n\nexport const GateTypeSchema = z.enum([\"AND\", \"OR\", \"XOR\", \"NOT\"]);\nexport type GateType = z.infer<typeof GateTypeSchema>;\n\nexport const WireLabelSchema = z\n  .instanceof(Uint8Array)\n  .refine((val) => val.length === 16, \"Wire label must be 16 bytes (128 bits)\");\n\nexport const GateSchema = z\n  .object({\n    type: GateTypeSchema,\n    inputs: z.array(z.number().int().nonnegative()).min(1).max(2),\n    output: z.number().int().nonnegative(),\n  })\n  .strict();\n\nexport type Gate = z.infer<typeof GateSchema>;\n\nexport const GarbledGateSchema = z\n  .object({\n    encryptedTable: z.array(z.instanceof(Uint8Array)),\n  })\n  .strict();\n\nexport type GarbledGate = z.infer<typeof GarbledGateSchema>;\n\nexport const GarbledCircuitSchema = z\n  .object({\n    gates: z.array(GarbledGateSchema),\n    inputWireLabels: z.record(\n      z.string(),\n      z.tuple([WireLabelSchema, WireLabelSchema])\n    ),\n    outputWireLabels: z.record(z.string(), WireLabelSchema),\n  })\n  .strict();\n\nexport type GarbledCircuit = z.infer<typeof GarbledCircuitSchema>;\n\n// ============================================================================\n// Storage Backend Interface Schema\n// ============================================================================\n\nexport const StorageOperationSchema = z.discriminatedUnion(\"operation\", [\n  z.object({\n    operation: z.literal(\"addParticipant\"),\n    did: DIDSchema,\n    name: z.string(),\n    publicKey: z.string().optional(),\n  }),\n  z.object({\n    operation: z.literal(\"getParticipant\"),\n    did: DIDSchema,\n  }),\n  z.object({\n    operation: z.literal(\"addCapacity\"),\n    capacity: CapacitySchema,\n  }),\n  z.object({\n    operation: z.literal(\"addDesire\"),\n    recipientDid: DIDSchema,\n    capacityId: CapacityIDSchema,\n    quantityDesired: z.number().positive(),\n  }),\n]);\n\nexport type StorageOperation = z.infer<typeof StorageOperationSchema>;\n\n// ============================================================================\n// Validation Helpers\n// ============================================================================\n\n/**\n * Parse and validate data against schema, throwing descriptive error\n */\nexport function parse<T>(schema: z.ZodType<T>, data: unknown): T {\n  const result = schema.safeParse(data);\n  if (!result.success) {\n    const errors = result.error.errors.map(\n      (e) => `${e.path.join(\".\")}: ${e.message}`\n    );\n    throw new Error(`Validation failed:\\n${errors.join(\"\\n\")}`);\n  }\n  return result.data;\n}\n\n/**\n * Check if data matches schema without throwing\n */\nexport function validate<T>(schema: z.ZodType<T>, data: unknown): boolean {\n  return schema.safeParse(data).success;\n}\n\n/**\n * Get human-readable validation errors\n */\nexport function getValidationErrors<T>(\n  schema: z.ZodType<T>,\n  data: unknown\n): string[] {\n  const result = schema.safeParse(data);\n  if (result.success) return [];\n  return result.error.errors.map((e) => `${e.path.join(\".\")}: ${e.message}`);\n}\n\n// ============================================================================\n// Export all schemas\n// ============================================================================\n\nexport const Schemas = {\n  // Primitives\n  DID: DIDSchema,\n  Percentage: PercentageSchema,\n  CapacityID: CapacityIDSchema,\n  HexString: HexStringSchema,\n  Bytes32: Bytes32Schema,\n  Bytes64: Bytes64Schema,\n\n  // Cryptography\n  Commitment: CommitmentSchema,\n  Share: ShareSchema,\n  MPCShare: MPCShareSchema,\n\n  // Participants\n  Participant: ParticipantSchema,\n  RecognitionValue: RecognitionValueSchema,\n  MutualRecognition: MutualRecognitionSchema,\n\n  // Capacity & Allocation\n  SlotID: SlotIDSchema,\n  AvailabilitySlot: AvailabilitySlotSchema,\n  Capacity: CapacitySchema,\n  Desire: DesireSchema,\n  MutualDesire: MutualDesireSchema,\n  ProviderDesire: ProviderDesireSchema,\n  Allocation: AllocationSchema,\n  AllocationResult: AllocationResultSchema,\n  SlotAllocationResult: SlotAllocationResultSchema,\n  AllocationOutput: AllocationOutputSchema,\n\n  // Configuration\n  RDXConfig: RDXConfigSchema,\n\n  // Garbled Circuits\n  GateType: GateTypeSchema,\n  WireLabel: WireLabelSchema,\n  Gate: GateSchema,\n  GarbledGate: GarbledGateSchema,\n  GarbledCircuit: GarbledCircuitSchema,\n\n  // Storage\n  StorageOperation: StorageOperationSchema,\n} as const;\n\nexport default Schemas;\n","/**\n * RDX Core - Data Structures & Utilities\n * Uses centralized Zod schemas for validation\n */\n\nimport { randomBytes } from \"crypto\";\nimport { commit as createCommitment } from \"./crypto-core.js\";\nimport {\n  // Import all schemas\n  Schemas,\n  // Import types\n  type Participant,\n  type RecognitionValue,\n  type MutualRecognition,\n  type Capacity,\n  type Desire,\n  type Allocation,\n  type RDXConfig,\n  type Commitment,\n  type AvailabilitySlot,\n  type MutualDesire,\n  type ProviderDesire,\n  // Import validation helpers\n  parse,\n} from \"./schemas.js\";\n\n// ============================================================================\n// Re-export types and schemas\n// ============================================================================\n\nexport type {\n  Participant,\n  RecognitionValue,\n  MutualRecognition,\n  Capacity,\n  AvailabilitySlot,\n  Desire,\n  MutualDesire,\n  ProviderDesire,\n  Allocation,\n  SlotAllocationResult,\n  RDXConfig,\n  Commitment,\n  Share,\n  AllocationResult,\n  AllocationOutput,\n  GateType,\n  Gate,\n  GarbledGate,\n  GarbledCircuit,\n  MPCShare,\n} from \"./schemas.js\";\n\nexport {\n  Schemas,\n  parse,\n  DIDSchema,\n  PercentageSchema,\n  CapacityIDSchema,\n  SlotIDSchema,\n  ParticipantSchema,\n  RecognitionValueSchema,\n  MutualRecognitionSchema,\n  CapacitySchema,\n  AvailabilitySlotSchema,\n  DesireSchema,\n  MutualDesireSchema,\n  ProviderDesireSchema,\n  AllocationSchema,\n  SlotAllocationResultSchema,\n  RDXConfigSchema,\n  CommitmentSchema,\n  ShareSchema,\n  // Also export validation helpers for external use\n  validate,\n  getValidationErrors,\n} from \"./schemas.js\";\n\n// ============================================================================\n// Custom Exceptions\n// ============================================================================\n\nexport class RDXException extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"RDXException\";\n  }\n}\n\nexport class ValidationError extends RDXException {\n  constructor(message: string) {\n    super(message);\n    this.name = \"ValidationError\";\n  }\n}\n\nexport class CryptographicError extends RDXException {\n  constructor(message: string) {\n    super(message);\n    this.name = \"CryptographicError\";\n  }\n}\n\nexport class AllocationError extends RDXException {\n  constructor(message: string) {\n    super(message);\n    this.name = \"AllocationError\";\n  }\n}\n\n// ============================================================================\n// Validated Constructors\n// ============================================================================\n\n/**\n * Create and validate a Participant\n */\nexport function createParticipant(\n  did: string,\n  name: string,\n  publicKey?: string\n): Participant {\n  return parse(Schemas.Participant, { did, name, publicKey });\n}\n\n/**\n * Create and validate a RecognitionValue\n */\nexport function createRecognitionValue(percentage: number): RecognitionValue {\n  return parse(Schemas.RecognitionValue, { percentage });\n}\n\n/**\n * Create and validate a MutualRecognition\n */\nexport function createMutualRecognition(\n  participantA: string,\n  participantB: string,\n  value: number\n): MutualRecognition {\n  return parse(Schemas.MutualRecognition, {\n    participantA,\n    participantB,\n    value,\n  });\n}\n\n/**\n * Create and validate an AvailabilitySlot\n */\nexport function createSlot(\n  id: string,\n  quantity: number,\n  metadata?: Record<string, any>,\n  startDate?: string,\n  endDate?: string,\n  recurrence?: string\n): AvailabilitySlot {\n  return parse(Schemas.AvailabilitySlot, {\n    id,\n    quantity,\n    metadata,\n    startDate,\n    endDate,\n    recurrence,\n  }) as AvailabilitySlot;\n}\n\n/**\n * Create and validate a Capacity\n */\nexport function createCapacity(\n  id: string,\n  providerDid: string,\n  capacityType: string,\n  totalQuantity: number,\n  unit: string,\n  filters?: Record<string, any>,\n  availabilitySlots?: AvailabilitySlot[]\n): Capacity {\n  return parse(Schemas.Capacity, {\n    id,\n    providerDid,\n    capacityType,\n    totalQuantity,\n    unit,\n    filters: filters ?? {},\n    availabilitySlots: availabilitySlots ?? [],\n  }) as Capacity;\n}\n\n/**\n * Create and validate a Desire\n */\nexport function createDesire(\n  recipientDid: string,\n  capacityId: string,\n  quantityDesired: number,\n  slotId?: string\n): Desire {\n  return parse(Schemas.Desire, {\n    recipientDid,\n    capacityId,\n    quantityDesired,\n    slotId,\n  });\n}\n\n/**\n * Create and validate a ProviderDesire\n */\nexport function createProviderDesire(\n  providerDid: string,\n  recipientDid: string,\n  capacityId: string,\n  quantityOffered: number,\n  slotId?: string\n): ProviderDesire {\n  return parse(Schemas.ProviderDesire, {\n    providerDid,\n    recipientDid,\n    capacityId,\n    slotId,\n    quantityOffered,\n  }) as ProviderDesire;\n}\n\n/**\n * Create and validate a MutualDesire\n */\nexport function createMutualDesire(\n  recipientDid: string,\n  capacityId: string,\n  recipientDesire: number,\n  providerDesire: number,\n  slotId?: string\n): MutualDesire {\n  const mutual = Math.min(recipientDesire, providerDesire);\n  return parse(Schemas.MutualDesire, {\n    recipientDid,\n    capacityId,\n    slotId,\n    recipientDesire,\n    providerDesire,\n    mutual,\n  }) as MutualDesire;\n}\n\n/**\n * Create and validate an Allocation\n */\nexport function createAllocation(\n  capacityId: string,\n  recipientDid: string,\n  quantityAllocated: number,\n  slotId?: string,\n  proof?: Uint8Array,\n  confirmed?: boolean\n): Allocation {\n  return parse(Schemas.Allocation, {\n    capacityId,\n    slotId,\n    recipientDid,\n    quantityAllocated,\n    proof,\n    confirmed: confirmed ?? false,\n  }) as Allocation;\n}\n\n/**\n * Create and validate RDXConfig\n */\nexport function createRDXConfig(\n  mpcNodes?: number,\n  threshold?: number,\n  logLevel?: \"DEBUG\" | \"INFO\" | \"WARN\" | \"ERROR\"\n): RDXConfig {\n  return parse(Schemas.RDXConfig, {\n    mpcNodes: mpcNodes ?? 3,\n    threshold,\n    logLevel: logLevel ?? \"INFO\",\n  }) as RDXConfig;\n}\n\n// ============================================================================\n// Performance Metrics Collector\n// ============================================================================\n\nexport class MetricsCollector {\n  private metrics: Map<\n    string,\n    { count: number; totalTime: number; avgTime: number }\n  > = new Map();\n\n  startOperation(operationName: string): () => void {\n    const startTime = performance.now();\n\n    return () => {\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      const existing = this.metrics.get(operationName) || {\n        count: 0,\n        totalTime: 0,\n        avgTime: 0,\n      };\n\n      const newCount = existing.count + 1;\n      const newTotal = existing.totalTime + duration;\n\n      this.metrics.set(operationName, {\n        count: newCount,\n        totalTime: newTotal,\n        avgTime: newTotal / newCount,\n      });\n    };\n  }\n\n  getMetrics(operationName?: string) {\n    if (operationName) {\n      return this.metrics.get(operationName) || null;\n    }\n    return Object.fromEntries(this.metrics);\n  }\n\n  report(): string {\n    const lines = [\"Performance Metrics Report:\", \"=\".repeat(60)];\n\n    for (const [operation, stats] of this.metrics.entries()) {\n      lines.push(`${operation}:`);\n      lines.push(`  Count: ${stats.count}`);\n      lines.push(`  Total Time: ${stats.totalTime.toFixed(2)}ms`);\n      lines.push(`  Avg Time: ${stats.avgTime.toFixed(2)}ms`);\n      lines.push(\"\");\n    }\n\n    return lines.join(\"\\n\");\n  }\n\n  reset(): void {\n    this.metrics.clear();\n  }\n}\n\n// ============================================================================\n// Secure Memory Management\n// ============================================================================\n\nexport class SecureMemory<T> {\n  private value: T | null;\n  private cleared: boolean = false;\n\n  constructor(value: T) {\n    this.value = value;\n  }\n\n  get(): T {\n    if (this.cleared) {\n      throw new Error(\"Secure memory has been cleared\");\n    }\n    if (this.value === null) {\n      throw new Error(\"Value is null\");\n    }\n    return this.value;\n  }\n\n  clear(): void {\n    if (this.value && typeof this.value === \"object\") {\n      // Zero out if it's a Uint8Array\n      if (this.value instanceof Uint8Array) {\n        this.value.fill(0);\n      }\n    }\n    this.value = null;\n    this.cleared = true;\n  }\n\n  isCleared(): boolean {\n    return this.cleared;\n  }\n}\n\n// ============================================================================\n// Commitment Helper\n// ============================================================================\n\nexport class CommitmentHelper {\n  static createWithRandomness(value: number): {\n    commitment: Commitment;\n    randomness: Uint8Array;\n  } {\n    const randomness = randomBytes(32);\n    const commitment = createCommitment(value, randomness);\n    return { commitment, randomness };\n  }\n\n  static createSecure(value: number): {\n    commitment: Commitment;\n    getRandomness: () => Uint8Array;\n    clearRandomness: () => void;\n  } {\n    const secureRandomness = new SecureMemory(randomBytes(32));\n    const commitment = createCommitment(value, secureRandomness.get());\n\n    return {\n      commitment,\n      getRandomness: () => secureRandomness.get(),\n      clearRandomness: () => secureRandomness.clear(),\n    };\n  }\n}\n\n// ============================================================================\n// Storage Backend Interface\n// ============================================================================\n\nexport interface StorageBackend {\n  // Participants\n  addParticipant(did: string, name: string, publicKey?: string): void | Promise<void>;\n  getParticipant(did: string): Participant | null | Promise<Participant | null>;\n  listParticipants(): Participant[] | Promise<Participant[]>;\n\n  // Capacities\n  addCapacity(capacity: Capacity): void | Promise<void>;\n  getCapacity(id: string): Capacity | null | Promise<Capacity | null>;\n  listCapacities(providerDid?: string): Capacity[] | Promise<Capacity[]>;\n\n  // Desires\n  addDesire(\n    recipientDid: string,\n    capacityId: string,\n    quantityDesired: number,\n    slotId?: string\n  ): void | Promise<void>;\n  getDesires(\n    capacityId: string,\n    slotId?: string\n  ): Array<{ recipientDid: string; quantity: number }> | Promise<Array<{ recipientDid: string; quantity: number }>>;\n\n  // Commitments\n  addCommitment(\n    fromDid: string,\n    toDid: string,\n    commitment: Uint8Array,\n    randomness: Uint8Array\n  ): void | Promise<void>;\n  getCommitment(\n    fromDid: string,\n    toDid: string\n  ): { commitment: Uint8Array; randomness: Uint8Array } | null | Promise<{ commitment: Uint8Array; randomness: Uint8Array } | null>;\n\n  // Allocations\n  addAllocation(allocation: Allocation): void | Promise<void>;\n  getAllocations(capacityId: string, slotId?: string): Allocation[] | Promise<Allocation[]>;\n}\n","/**\n * Holster Storage Backend for RDX\n * Decentralized, real-time persistence using Holster (GunDB wire spec)\n */\n\nimport type {\n  StorageBackend,\n  Participant,\n  Capacity,\n  Allocation,\n  AvailabilitySlot,\n  ProviderDesire,\n} from \"./rdx-core.js\";\nimport { ValidationError } from \"./rdx-core.js\";\n\n// Holster will be imported dynamically\nlet Holster: any;\n\n/**\n * Holster-based storage implementation\n * \n * Data Structure (per user):\n * user.get('participants') -> { [did]: Participant }\n * user.get('capacities') -> { [id]: Capacity }\n * user.get('slots').get(capacityId) -> { [slotId]: AvailabilitySlot }\n * user.get('desires') -> { [recipientDid_capacityId_slotId]: Desire }\n * user.get('providerDesires') -> { [recipientDid_capacityId_slotId]: ProviderDesire }\n * user.get('commitments') -> { [toDid]: { commitment, randomness } }\n * user.get('allocations') -> { [capacityId_slotId_recipientDid]: Allocation }\n */\nexport class HolsterStorage implements StorageBackend {\n  private holster: any;\n  private user: any;\n  private isInitialized = false;\n\n  constructor(private options: { indexedDB?: boolean } = {}) {\n    // Holster will be initialized asynchronously\n  }\n\n  /**\n   * Initialize Holster and user authentication\n   */\n  async initialize(userId: string): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    // Dynamically import Holster\n    const HolsterModule = await import(\"holster\");\n    Holster = HolsterModule.default || HolsterModule;\n\n    // Initialize Holster instance\n    this.holster = Holster(this.options);\n\n    // Set up authenticated user context\n    // In a real app, this would use proper authentication\n    // For now, we use the userId directly\n    this.user = this.holster.user(userId);\n\n    this.isInitialized = true;\n    console.log(`[HOLSTER] Initialized storage for user: ${userId.substring(0, 20)}...`);\n  }\n\n  private ensureInitialized(): void {\n    if (!this.isInitialized) {\n      throw new Error(\"Holster storage not initialized. Call initialize() first.\");\n    }\n  }\n\n  // ========================================================================\n  // Participant Operations\n  // ========================================================================\n\n  addParticipant(did: string, name: string, publicKey: string = \"\"): void {\n    this.ensureInitialized();\n\n    const participant = {\n      did,\n      name,\n      publicKey,\n      createdAt: Date.now(),\n    };\n\n    this.user.get(\"participants\").get(did).put(participant, (err: any) => {\n      if (err) {\n        throw new ValidationError(`Failed to add participant: ${err}`);\n      }\n      console.log(`[HOLSTER] Added participant: ${name} (${did.substring(0, 20)}...)`);\n    });\n  }\n\n  getParticipant(did: string): Promise<Participant | null> {\n    this.ensureInitialized();\n\n    return new Promise((resolve) => {\n      this.user\n        .get(\"participants\")\n        .get(did)\n        .once((data: any) => {\n          if (!data) {\n            resolve(null);\n            return;\n          }\n\n          resolve({\n            did: data.did,\n            name: data.name,\n            publicKey: data.publicKey,\n          });\n        });\n    });\n  }\n\n  listParticipants(): Promise<Participant[]> {\n    this.ensureInitialized();\n\n    return new Promise((resolve) => {\n      const participants: Participant[] = [];\n\n      this.user\n        .get(\"participants\")\n        .map()\n        .once((data: any, key: string) => {\n          if (data && key !== \"_\") {\n            participants.push({\n              did: data.did,\n              name: data.name,\n              publicKey: data.publicKey,\n            });\n          }\n\n          // Note: In real usage, you'd want to batch this\n          // For now, we resolve after collecting all\n          resolve(participants);\n        });\n    });\n  }\n\n  // ========================================================================\n  // Capacity Operations\n  // ========================================================================\n\n  addCapacity(capacity: Capacity): void {\n    this.ensureInitialized();\n\n    const capacityData = {\n      id: capacity.id,\n      providerDid: capacity.providerDid,\n      capacityType: capacity.capacityType,\n      totalQuantity: capacity.totalQuantity,\n      unit: capacity.unit,\n      filters: capacity.filters,\n      createdAt: Date.now(),\n    };\n\n    this.user.get(\"capacities\").get(capacity.id).put(capacityData, (err: any) => {\n      if (err) {\n        throw new ValidationError(`Failed to add capacity: ${err}`);\n      }\n      console.log(`[HOLSTER] Added capacity: ${capacity.id}`);\n    });\n\n    // Store slots separately for efficient querying\n    if (capacity.availabilitySlots && capacity.availabilitySlots.length > 0) {\n      capacity.availabilitySlots.forEach((slot) => {\n        this.addSlot(slot, capacity.id);\n      });\n    }\n  }\n\n  getCapacity(id: string): Promise<Capacity | null> {\n    this.ensureInitialized();\n\n    return new Promise(async (resolve) => {\n      this.user\n        .get(\"capacities\")\n        .get(id)\n        .once(async (data: any) => {\n          if (!data) {\n            resolve(null);\n            return;\n          }\n\n          // Fetch associated slots\n          const slots = await this.getSlots(id);\n\n          resolve({\n            id: data.id,\n            providerDid: data.providerDid,\n            capacityType: data.capacityType,\n            totalQuantity: data.totalQuantity,\n            unit: data.unit,\n            filters: data.filters || {},\n            availabilitySlots: slots,\n          });\n        });\n    });\n  }\n\n  listCapacities(providerDid?: string): Promise<Capacity[]> {\n    this.ensureInitialized();\n\n    return new Promise((resolve) => {\n      const capacities: Capacity[] = [];\n\n      this.user\n        .get(\"capacities\")\n        .map()\n        .once(async (data: any, key: string) => {\n          if (!data || key === \"_\") return;\n\n          if (!providerDid || data.providerDid === providerDid) {\n            const slots = await this.getSlots(data.id);\n\n            capacities.push({\n              id: data.id,\n              providerDid: data.providerDid,\n              capacityType: data.capacityType,\n              totalQuantity: data.totalQuantity,\n              unit: data.unit,\n              filters: data.filters || {},\n              availabilitySlots: slots,\n            });\n          }\n\n          resolve(capacities);\n        });\n    });\n  }\n\n  // ========================================================================\n  // Slot Operations\n  // ========================================================================\n\n  addSlot(slot: AvailabilitySlot, capacityId: string): void {\n    this.ensureInitialized();\n\n    const slotData = {\n      id: slot.id,\n      capacityId,\n      quantity: slot.quantity,\n      metadata: slot.metadata,\n      startDate: slot.startDate,\n      endDate: slot.endDate,\n      recurrence: slot.recurrence,\n      createdAt: Date.now(),\n    };\n\n    this.user\n      .get(\"slots\")\n      .get(capacityId)\n      .get(slot.id)\n      .put(slotData, (err: any) => {\n        if (err) {\n          throw new ValidationError(`Failed to add slot: ${err}`);\n        }\n        console.log(`[HOLSTER] Added slot: ${slot.id} to capacity ${capacityId}`);\n      });\n  }\n\n  getSlots(capacityId: string): Promise<AvailabilitySlot[]> {\n    this.ensureInitialized();\n\n    return new Promise((resolve) => {\n      const slots: AvailabilitySlot[] = [];\n\n      this.user\n        .get(\"slots\")\n        .get(capacityId)\n        .map()\n        .once((data: any, key: string) => {\n          if (!data || key === \"_\") return;\n\n          slots.push({\n            id: data.id,\n            quantity: data.quantity,\n            metadata: data.metadata,\n            startDate: data.startDate,\n            endDate: data.endDate,\n            recurrence: data.recurrence,\n          });\n\n          resolve(slots);\n        });\n    });\n  }\n\n  // ========================================================================\n  // Desire Operations\n  // ========================================================================\n\n  addDesire(\n    recipientDid: string,\n    capacityId: string,\n    quantityDesired: number,\n    slotId?: string\n  ): void {\n    this.ensureInitialized();\n\n    const desireKey = `${recipientDid}_${capacityId}_${slotId || \"none\"}`;\n    const desireData = {\n      recipientDid,\n      capacityId,\n      slotId: slotId || null,\n      quantityDesired,\n      createdAt: Date.now(),\n    };\n\n    this.user.get(\"desires\").get(desireKey).put(desireData, (err: any) => {\n      if (err) {\n        throw new ValidationError(`Failed to add desire: ${err}`);\n      }\n      console.log(`[HOLSTER] Added desire: ${desireKey}`);\n    });\n  }\n\n  getDesires(\n    capacityId: string,\n    slotId?: string\n  ): Promise<Array<{ recipientDid: string; quantity: number }>> {\n    this.ensureInitialized();\n\n    return new Promise((resolve) => {\n      const desires: Array<{ recipientDid: string; quantity: number }> = [];\n\n      this.user\n        .get(\"desires\")\n        .map()\n        .once((data: any, key: string) => {\n          if (!data || key === \"_\") return;\n\n          // Filter by capacityId and optionally slotId\n          if (data.capacityId === capacityId) {\n            const matchesSlot = slotId\n              ? data.slotId === slotId\n              : data.slotId === null;\n\n            if (matchesSlot) {\n              desires.push({\n                recipientDid: data.recipientDid,\n                quantity: data.quantityDesired,\n              });\n            }\n          }\n\n          resolve(desires);\n        });\n    });\n  }\n\n  // ========================================================================\n  // Provider Desire Operations\n  // ========================================================================\n\n  addProviderDesire(providerDesire: ProviderDesire): void {\n    this.ensureInitialized();\n\n    const key = `${providerDesire.recipientDid}_${providerDesire.capacityId}_${providerDesire.slotId || \"none\"}`;\n    const data = {\n      providerDid: providerDesire.providerDid,\n      recipientDid: providerDesire.recipientDid,\n      capacityId: providerDesire.capacityId,\n      slotId: providerDesire.slotId || null,\n      quantityOffered: providerDesire.quantityOffered,\n      createdAt: Date.now(),\n    };\n\n    this.user.get(\"providerDesires\").get(key).put(data, (err: any) => {\n      if (err) {\n        throw new ValidationError(`Failed to add provider desire: ${err}`);\n      }\n      console.log(`[HOLSTER] Added provider desire: ${key}`);\n    });\n  }\n\n  getProviderDesires(\n    capacityId: string,\n    slotId?: string\n  ): Promise<Array<{ recipientDid: string; quantity: number }>> {\n    this.ensureInitialized();\n\n    return new Promise((resolve) => {\n      const desires: Array<{ recipientDid: string; quantity: number }> = [];\n\n      this.user\n        .get(\"providerDesires\")\n        .map()\n        .once((data: any, key: string) => {\n          if (!data || key === \"_\") return;\n\n          if (data.capacityId === capacityId) {\n            const matchesSlot = slotId\n              ? data.slotId === slotId\n              : data.slotId === null;\n\n            if (matchesSlot) {\n              desires.push({\n                recipientDid: data.recipientDid,\n                quantity: data.quantityOffered,\n              });\n            }\n          }\n\n          resolve(desires);\n        });\n    });\n  }\n\n  // ========================================================================\n  // Commitment Operations\n  // ========================================================================\n\n  addCommitment(\n    fromDid: string,\n    toDid: string,\n    commitment: Uint8Array,\n    randomness: Uint8Array\n  ): void {\n    this.ensureInitialized();\n\n    const commitmentData = {\n      fromDid,\n      toDid,\n      commitment: Array.from(commitment), // Convert to array for Gun storage\n      randomness: Array.from(randomness),\n      createdAt: Date.now(),\n    };\n\n    this.user.get(\"commitments\").get(toDid).put(commitmentData, (err: any) => {\n      if (err) {\n        throw new ValidationError(`Failed to add commitment: ${err}`);\n      }\n      console.log(`[HOLSTER] Added commitment to ${toDid.substring(0, 20)}...`);\n    });\n  }\n\n  getCommitment(\n    fromDid: string,\n    toDid: string\n  ): Promise<{ commitment: Uint8Array; randomness: Uint8Array } | null> {\n    this.ensureInitialized();\n\n    return new Promise((resolve) => {\n      this.user\n        .get(\"commitments\")\n        .get(toDid)\n        .once((data: any) => {\n          if (!data || data.fromDid !== fromDid) {\n            resolve(null);\n            return;\n          }\n\n          resolve({\n            commitment: new Uint8Array(data.commitment),\n            randomness: new Uint8Array(data.randomness),\n          });\n        });\n    });\n  }\n\n  // ========================================================================\n  // Allocation Operations\n  // ========================================================================\n\n  addAllocation(allocation: Allocation): void {\n    this.ensureInitialized();\n\n    const key = `${allocation.capacityId}_${allocation.slotId || \"none\"}_${allocation.recipientDid}`;\n    const allocationData = {\n      capacityId: allocation.capacityId,\n      slotId: allocation.slotId || null,\n      recipientDid: allocation.recipientDid,\n      quantityAllocated: allocation.quantityAllocated,\n      proof: allocation.proof ? Array.from(allocation.proof) : null,\n      confirmed: allocation.confirmed,\n      createdAt: Date.now(),\n    };\n\n    this.user.get(\"allocations\").get(key).put(allocationData, (err: any) => {\n      if (err) {\n        console.error(`[HOLSTER] Failed to add allocation:`, err);\n      } else {\n        console.log(`[HOLSTER] Added allocation: ${key}`);\n      }\n    });\n  }\n\n  getAllocations(capacityId: string, slotId?: string): Promise<Allocation[]> {\n    this.ensureInitialized();\n\n    return new Promise((resolve) => {\n      const allocations: Allocation[] = [];\n\n      this.user\n        .get(\"allocations\")\n        .map()\n        .once((data: any, key: string) => {\n          if (!data || key === \"_\") return;\n\n          if (data.capacityId === capacityId) {\n            const matchesSlot = slotId\n              ? data.slotId === slotId\n              : true; // If no slotId filter, match all\n\n            if (matchesSlot) {\n              allocations.push({\n                capacityId: data.capacityId,\n                slotId: data.slotId,\n                recipientDid: data.recipientDid,\n                quantityAllocated: data.quantityAllocated,\n                proof: data.proof ? new Uint8Array(data.proof) : undefined,\n                confirmed: data.confirmed,\n              });\n            }\n          }\n\n          resolve(allocations);\n        });\n    });\n  }\n\n  // ========================================================================\n  // Transaction Support\n  // ========================================================================\n\n  transaction<T>(fn: () => T): T {\n    // Holster doesn't have built-in transactions like SQL\n    // For now, just execute the function\n    // In a real implementation, you might want to implement optimistic updates\n    return fn();\n  }\n\n  // ========================================================================\n  // Cleanup\n  // ========================================================================\n\n  close(): void {\n    console.log(\"[HOLSTER] Closing storage connection\");\n    this.isInitialized = false;\n  }\n}\n\n"],"names":["crypto","isBytes","a","anumber","abytes","b","lengths","ahash","h","aexists","instance","checkFinished","aoutput","out","min","clean","arrays","i","createView","arr","rotr","word","shift","hasHexBuiltin","hexes","_","bytesToHex","bytes","hex","asciis","asciiToBase16","ch","hexToBytes","hl","al","array","ai","hi","n1","n2","char","utf8ToBytes","str","toBytes","data","concatBytes","sum","res","pad","Hash","createHasher","hashCons","hashC","msg","tmp","randomBytes","bytesLength","setBigUint64","view","byteOffset","value","isLE","_32n","_u32_max","wh","wl","l","Chi","c","Maj","HashMD","blockLen","outputLen","padOffset","buffer","len","pos","take","dataView","oview","outLen","state","to","length","finished","destroyed","SHA256_IV","SHA256_K","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","W15","W2","s0","s1","sigma1","T1","T2","sha256","HMAC","hash","_key","key","buf","oHash","iHash","hmac","message","_0n","_1n","_abool2","title","prefix","_abytes2","isBytes_","needsLen","ofLen","got","numberToHexUnpadded","num","hexToNumber","bytesToNumberBE","bytesToHex_","bytesToNumberLE","abytes_","numberToBytesBE","hexToBytes_","numberToBytesLE","ensureBytes","expectedLength","e","isPosBig","inRange","max","aInRange","n","bitLen","bitMask","createHmacDrbg","hashLen","qByteLen","hmacFn","u8n","u8of","byte","v","k","reset","reseed","seed","gen","sl","concatBytes_","pred","_validateObject","object","fields","optFields","checkField","fieldName","expectedType","isOpt","val","current","memoized","fn","map","arg","args","computed","_2n","_3n","_4n","_5n","_7n","_8n","_9n","_16n","mod","result","pow2","x","power","modulo","invert","number","u","q","r","m","assertIsSquare","Fp","root","sqrt3mod4","p1div4","sqrt5mod8","p5div8","nv","sqrt9mod16","P","Fp_","Field","tn","tonelliShanks","c1","c2","c3","c4","tv1","tv2","tv3","tv4","e1","e2","e3","Q","S","Z","_Fp","FpLegendre","cc","Q1div2","M","t","R","t_tmp","exponent","FpSqrt","FIELD_FIELDS","validateField","field","initial","opts","FpPow","p","d","FpInvertBatch","nums","passZero","inverted","multipliedAcc","acc","invertedAcc","p1mod2","powered","yes","zero","no","nLength","nBitLength","_nBitLength","nByteLength","ORDER","bitLenOrOpts","_nbitLength","_sqrt","modFromBytes","allowedLengths","_opts","BITS","BYTES","sqrtP","f","lhs","rhs","skipValidation","padded","scalar","lst","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","fieldLen","minLen","reduced","negateCt","condition","item","neg","normalizeZ","points","invertedZs","validateW","W","bits","calcWOpts","scalarBits","windows","windowSize","maxNumber","mask","shiftBy","calcOffsets","window","wOpts","wbits","nextN","offsetStart","isZero","isNeg","isNegF","validateMSMPoints","validateMSMScalars","scalars","s","pointPrecomputes","pointWindowSizes","getW","assert0","wNAF","Point","elm","point","base","precomputes","wo","offsetF","transform","comp","prev","mulEndoUnsafe","k1","k2","p1","p2","pippenger","fieldN","plength","slength","MASK","buckets","lastBits","j","resI","sumI","createField","order","_createCurveFields","type","CURVE","curveOpts","FpFnLE","Fn","params","divNearest","den","_splitEndoScalar","basis","a1","b1","a2","b2","k1neg","k2neg","MAX_NUM","validateSigFormat","format","validateSigOpts","def","optsn","optName","abool","DERErr","DER","tag","dataLen","lenLen","first","isLong","lengthBytes","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","sig","rs","ss","seq","_normFnElement","expected","weierstrassN","extraOpts","validated","cofactor","CURVE_ORDER","endo","getWLengths","assertCompressionIsSupported","pointToBytes","_c","isCompressed","y","bx","hasEvenY","pprefix","pointFromBytes","uncomp","head","tail","y2","weierstrassEquation","sqrtError","err","isYOdd","L","isValidXY","encodePoint","decodePoint","x2","x3","left","right","_4a3","_27b2","acoord","banZero","aprjpoint","other","splitEndoScalarN","toAffineMemo","iz","X","Y","is0","zz","assertValidMemo","finishEndo","endoBeta","k1p","k2p","isLazy","wnaf","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t2","t3","t4","t5","fake","mul","k1f","k2f","sc","invertedZ","isTorsionFree","clearCofactor","privateKey","ecdh","ecdhOpts","randomBytes_","randomBytesWeb","isValidSecretKey","secretKey","isValidPublicKey","publicKey","publicKeyUncompressed","randomSecretKey","getPublicKey","keygen","isProbPub","getSharedSecret","secretKeyA","publicKeyB","ecdsa","ecdsaOpts","msgs","nobleHmac","fnBits","utils","defaultSigOpts","defaultSigOpts_format","isBiggerThanHalfOrder","HALF","validateRS","validateSigLength","size","sizer","Signature","recovery","recid","messageHash","FIELD_ORDER","rec","radj","ir","bits2int_modN","u1","u2","bits2int","delta","ORDER_MASK","int2octets","validateMsgAndHash","prehash","prepSig","lowS","extraEntropy","h1int","seedArgs","k2sig","kBytes","ik","normS","sign","tryParsingSig","sg","isHex","isObj","derError","verify","signature","is","recoverPublicKey","_weierstrass_legacy_opts_to_new","_ecdsa_legacy_opts_to_new","_ecdsa_new_output_to_legacy","_ecdsa","weierstrass","signs","createCurve","curveDef","defHash","create","secp256k1_CURVE","secp256k1_ENDO","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","Fpk1","secp256k1","sha256n","G_PEDERSEN","H_PEDERSEN_X","H_PEDERSEN_Y","H_PEDERSEN","commit","randomness","rand","valueInt","randInt","bytesToBigInt","gTerm","hTerm","affinePoint","xBytes","bigIntToBytes","yBytes","commitmentValue","verifyCommitment","commitment","recomputed","constantTimeEqual","SecretSharing","threshold","numShares","valueHex","secrets","shareStr","index","shares","shareStrings","MPCProtocol","numNodes","sharesA","sharesB","valueA","valueB","minValue","mrShares","totalCapacity","desires","mrValues","recipientId","validRecipients","mr","totalMR","allocations","remaining","proportionalShare","desire","allocated","unsatisfied","proportional","unsatisfiedTotalMR","extraShare","slot","recipientDesires","providerDesires","filterPredicate","filterContext","timestamp","filteredMRValues","mrValue","mutualDesires","recipientDesire","providerDesire","mutual","mutuallyDesiringRecipients","normalizedShares","usedCapacity","normalizedShare","rawAllocation","mutualDesire","constrainedAllocation","unusedCapacity","redistributionAmounts","unsatisfiedRecipients","redistributionShare","redistributionAmount","currentAllocation","maxAdditional","actualRedistribution","slots","results","slotRecipientDesires","slotProviderDesires","slotResult","temp","diff","TEESimulator","recognitionCommitments","capacityTotal","participants","reverseRec","recipientDid","attestationData","attestationHash","attestation","DIDSchema","z","PercentageSchema","CapacityIDSchema","HexStringSchema","Bytes32Schema","Bytes64Schema","CommitmentSchema","ShareSchema","MPCShareSchema","ParticipantSchema","RecognitionValueSchema","MutualRecognitionSchema","CapacityFiltersSchema","SlotIDSchema","AvailabilitySlotSchema","CapacitySchema","DesireSchema","MutualDesireSchema","ProviderDesireSchema","AllocationSchema","AllocationResultSchema","SlotAllocationResultSchema","AllocationOutputSchema","RDXConfigSchema","GateTypeSchema","WireLabelSchema","GateSchema","GarbledGateSchema","GarbledCircuitSchema","StorageOperationSchema","parse","schema","errors","validate","getValidationErrors","Schemas","RDXException","ValidationError","CryptographicError","AllocationError","createParticipant","did","name","createRecognitionValue","percentage","createMutualRecognition","participantA","participantB","createCapacity","id","providerDid","capacityType","totalQuantity","unit","filters","availabilitySlots","createDesire","capacityId","quantityDesired","slotId","createAllocation","quantityAllocated","proof","confirmed","createRDXConfig","mpcNodes","logLevel","MetricsCollector","operationName","startTime","duration","existing","newCount","newTotal","lines","operation","stats","SecureMemory","CommitmentHelper","createCommitment","secureRandomness","Holster","HolsterStorage","options","userId","HolsterModule","participant","resolve","capacity","capacityData","capacities","slotData","desireKey","desireData","fromDid","toDid","commitmentData","allocation","allocationData"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11]}