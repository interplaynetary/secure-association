{"version":3,"file":"rdx-cli.js","sources":["../src/rdx-cli.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * RDX Command-Line Interface\n * Interactive tool for Recognition Derivatives Exchange (Decentralized)\n */\n\nimport { Command } from \"commander\";\nimport chalk from \"chalk\";\nimport { randomBytes } from \"crypto\";\nimport { HolsterStorage } from \"./holster-storage.js\";\nimport { createRecognitionValue, createCapacity } from \"./rdx-core.js\";\nimport { commit as createCommitment } from \"./crypto-core.js\";\nimport { MPCProtocol } from \"./crypto-core.js\";\n\n// Global storage instance (initialized on first command)\nlet storage: HolsterStorage | null = null;\nlet userId: string | null = null;\n\n/**\n * Initialize storage with user ID\n */\nasync function initStorage(did: string): Promise<HolsterStorage> {\n  if (storage && userId === did) {\n    return storage;\n  }\n\n  console.log(\n    chalk.blue(`\\nüîó Initializing decentralized storage for ${did}...`)\n  );\n  storage = new HolsterStorage({ indexedDB: false }); // Use filesystem for CLI\n  await storage.initialize(did);\n  userId = did;\n  console.log(chalk.green(\"‚úÖ Storage initialized\\n\"));\n\n  return storage;\n}\n\nconst program = new Command();\n\nprogram\n  .name(\"rdx\")\n  .description(\"Recognition Derivatives Exchange - CLI Tool\")\n  .version(\"1.0.0\");\n\n// ============================================================================\n// Register Command\n// ============================================================================\n\nprogram\n  .command(\"register\")\n  .description(\n    \"Register a new participant (initializes your decentralized storage)\"\n  )\n  .requiredOption(\n    \"--did <did>\",\n    \"Decentralized Identifier (e.g., did:example:alice)\"\n  )\n  .requiredOption(\"--name <name>\", \"Participant name\")\n  .option(\"--public-key <key>\", \"Public key (optional)\")\n  .action(async (options) => {\n    try {\n      console.log(chalk.blue(\"\\nüîê Registering participant...\"));\n      console.log(chalk.gray(`   DID: ${options.did}`));\n      console.log(chalk.gray(`   Name: ${options.name}`));\n\n      const publicKey =\n        options.publicKey ||\n        randomBytes(32).toString(\"hex\").slice(0, 16) + \"...\";\n\n      const store = await initStorage(options.did);\n      store.addParticipant(options.did, options.name, publicKey);\n\n      console.log(chalk.green(`\\n‚úÖ Successfully registered ${options.name}`));\n      console.log(chalk.gray(\"   Your decentralized storage is ready.\"));\n      console.log(\n        chalk.gray(\"   You can now declare capacities and express desires.\\n\")\n      );\n    } catch (error: any) {\n      console.error(chalk.red(`\\n‚ùå Error: ${error.message}\\n`));\n      process.exit(1);\n    }\n  });\n\n// ============================================================================\n// List Participants Command\n// ============================================================================\n\nprogram\n  .command(\"list-participants\")\n  .description(\"List all registered participants\")\n  .requiredOption(\"--did <did>\", \"Your DID (for storage access)\")\n  .action(async (options) => {\n    try {\n      const store = await initStorage(options.did);\n      const participants = await store.listParticipants();\n\n      if (participants.length === 0) {\n        console.log(chalk.yellow(\"\\n‚ö†Ô∏è  No participants registered yet.\\n\"));\n        return;\n      }\n\n      console.log(chalk.blue(\"\\nüë• Registered Participants:\\n\"));\n      console.log(chalk.gray(\"‚îÄ\".repeat(70)));\n\n      for (const p of participants) {\n        console.log(chalk.white(`  ${p.name}`));\n        console.log(chalk.gray(`  DID: ${p.did}`));\n        if (p.publicKey) {\n          console.log(chalk.gray(`  Key: ${p.publicKey}`));\n        }\n        console.log(chalk.gray(\"‚îÄ\".repeat(70)));\n      }\n      console.log();\n    } catch (error: any) {\n      console.error(chalk.red(`\\n‚ùå Error: ${error.message}\\n`));\n      process.exit(1);\n    }\n  });\n\n// ============================================================================\n// Set Recognition Command\n// ============================================================================\n\nprogram\n  .command(\"set-recognition\")\n  .description(\"Set recognition value between two participants\")\n  .requiredOption(\"--from-did <did>\", \"Recognition from this DID\")\n  .requiredOption(\"--to-did <did>\", \"Recognition to this DID\")\n  .requiredOption(\n    \"--percentage <value>\",\n    \"Recognition percentage (0-100)\",\n    parseFloat\n  )\n  .action(async (options) => {\n    try {\n      const store = await initStorage(options.fromDid);\n      const fromParticipant = await store.getParticipant(options.fromDid);\n      const toParticipant = await store.getParticipant(options.toDid);\n\n      if (!fromParticipant) {\n        throw new Error(`Participant ${options.fromDid} not found`);\n      }\n      if (!toParticipant) {\n        throw new Error(`Participant ${options.toDid} not found`);\n      }\n\n      console.log(chalk.blue(\"\\nü§ù Setting recognition:\"));\n      console.log(chalk.gray(`   From: ${options.fromDid}`));\n      console.log(chalk.gray(`   To: ${options.toDid}`));\n      console.log(chalk.gray(`   Recognition: ${options.percentage}%`));\n\n      // Create commitment\n      const recognition = createRecognitionValue(options.percentage);\n      const randomness = randomBytes(32);\n      const commitment = createCommitment(recognition.percentage, randomness);\n\n      console.log(chalk.blue(\"\\nüîí Creating cryptographic commitment...\"));\n\n      // Store commitment\n      store.addCommitment(\n        options.fromDid,\n        options.toDid,\n        commitment.value,\n        commitment.randomness\n      );\n\n      console.log(\n        chalk.green(\"‚úÖ Recognition commitment stored (syncing to network)\")\n      );\n      console.log(\n        chalk.gray(\n          `   Commitment: ${Buffer.from(commitment.value).toString(\"hex\").slice(0, 32)}...`\n        )\n      );\n      console.log(chalk.gray(\"   (Recognition value is kept private)\\n\"));\n    } catch (error: any) {\n      console.error(chalk.red(`\\n‚ùå Error: ${error.message}\\n`));\n      process.exit(1);\n    }\n  });\n\n// ============================================================================\n// Declare Capacity Command\n// ============================================================================\n\nprogram\n  .command(\"declare-capacity\")\n  .description(\"Declare a new capacity (syncs to network)\")\n  .requiredOption(\"--provider-did <did>\", \"Provider DID\")\n  .requiredOption(\"--type <type>\", \"Capacity type (e.g., piano_lessons)\")\n  .requiredOption(\"--quantity <value>\", \"Total quantity\", parseFloat)\n  .requiredOption(\"--unit <unit>\", \"Unit (e.g., hours/week)\")\n  .option(\"--filters <json>\", \"Filters as JSON\", \"{}\")\n  .action(async (options) => {\n    try {\n      const store = await initStorage(options.providerDid);\n      const provider = await store.getParticipant(options.providerDid);\n      if (!provider) {\n        throw new Error(`Provider ${options.providerDid} not found`);\n      }\n\n      console.log(chalk.blue(\"\\nüì¶ Declaring capacity:\"));\n      console.log(chalk.gray(`   Provider: ${options.providerDid}`));\n      console.log(chalk.gray(`   Type: ${options.type}`));\n      console.log(\n        chalk.gray(`   Quantity: ${options.quantity} ${options.unit}`)\n      );\n\n      const capacityId = `cap-${randomBytes(8).toString(\"hex\")}`;\n      const filters = JSON.parse(options.filters);\n\n      const capacity = createCapacity(\n        capacityId,\n        options.providerDid,\n        options.type,\n        options.quantity,\n        options.unit,\n        filters\n      );\n\n      store.addCapacity(capacity);\n\n      console.log(\n        chalk.green(\"\\n‚úÖ Capacity declared successfully (syncing to network)\")\n      );\n      console.log(chalk.gray(`   Capacity ID: ${capacityId}`));\n      console.log(\n        chalk.gray(\"   Recipients can now express desire for this capacity\\n\")\n      );\n    } catch (error: any) {\n      console.error(chalk.red(`\\n‚ùå Error: ${error.message}\\n`));\n      process.exit(1);\n    }\n  });\n\n// ============================================================================\n// List Capacities Command\n// ============================================================================\n\nprogram\n  .command(\"list-capacities\")\n  .description(\"List all declared capacities (from network)\")\n  .requiredOption(\"--did <did>\", \"Your DID (for storage access)\")\n  .option(\"--provider <did>\", \"Filter by provider DID\")\n  .action(async (options) => {\n    try {\n      const store = await initStorage(options.did);\n      const capacities = await store.listCapacities(options.provider);\n\n      if (capacities.length === 0) {\n        console.log(chalk.yellow(\"\\n‚ö†Ô∏è  No capacities declared yet.\\n\"));\n        return;\n      }\n\n      console.log(chalk.blue(\"\\nüì¶ Available Capacities:\\n\"));\n      console.log(chalk.gray(\"‚îÄ\".repeat(70)));\n\n      for (const c of capacities) {\n        console.log(chalk.white(`  ${c.capacityType}`));\n        console.log(chalk.gray(`  ID: ${c.id}`));\n        console.log(chalk.gray(`  Provider: ${c.providerDid}`));\n        console.log(chalk.gray(`  Quantity: ${c.totalQuantity} ${c.unit}`));\n        console.log(chalk.gray(\"‚îÄ\".repeat(70)));\n      }\n      console.log();\n    } catch (error: any) {\n      console.error(chalk.red(`\\n‚ùå Error: ${error.message}\\n`));\n      process.exit(1);\n    }\n  });\n\n// ============================================================================\n// Express Desire Command\n// ============================================================================\n\nprogram\n  .command(\"express-desire\")\n  .description(\"Express desire for a capacity (syncs to network)\")\n  .requiredOption(\"--recipient-did <did>\", \"Recipient DID\")\n  .requiredOption(\"--capacity-id <id>\", \"Capacity ID\")\n  .requiredOption(\"--quantity <value>\", \"Desired quantity\", parseFloat)\n  .action(async (options) => {\n    try {\n      const store = await initStorage(options.recipientDid);\n      const recipient = await store.getParticipant(options.recipientDid);\n      if (!recipient) {\n        throw new Error(`Recipient ${options.recipientDid} not found`);\n      }\n\n      const capacity = await store.getCapacity(options.capacityId);\n      if (!capacity) {\n        throw new Error(`Capacity ${options.capacityId} not found`);\n      }\n\n      console.log(chalk.blue(\"\\nüí≠ Expressing desire:\"));\n      console.log(chalk.gray(`   Recipient: ${options.recipientDid}`));\n      console.log(chalk.gray(`   Capacity: ${options.capacityId}`));\n      console.log(chalk.gray(`   Quantity: ${options.quantity}`));\n\n      store.addDesire(\n        options.recipientDid,\n        options.capacityId,\n        options.quantity\n      );\n\n      console.log(\n        chalk.green(\"\\n‚úÖ Desire expressed successfully (syncing to network)\")\n      );\n      console.log(\n        chalk.gray(\"   Use compute-allocation to calculate allocations\\n\")\n      );\n    } catch (error: any) {\n      console.error(chalk.red(`\\n‚ùå Error: ${error.message}\\n`));\n      process.exit(1);\n    }\n  });\n\n// ============================================================================\n// Compute Allocation Command\n// ============================================================================\n\nprogram\n  .command(\"compute-allocation\")\n  .description(\"Compute allocations for a capacity\")\n  .requiredOption(\"--provider-did <did>\", \"Provider DID (for storage access)\")\n  .requiredOption(\"--capacity-id <id>\", \"Capacity ID\")\n  .option(\"--use-tee\", \"Use TEE simulation\", false)\n  .action(async (options) => {\n    try {\n      const store = await initStorage(options.providerDid);\n      const capacity = await store.getCapacity(options.capacityId);\n      if (!capacity) {\n        throw new Error(`Capacity ${options.capacityId} not found`);\n      }\n\n      console.log(\n        chalk.blue(\"\\n‚öôÔ∏è  Computing allocation for capacity:\", capacity.id)\n      );\n      console.log(chalk.gray(`   Provider: ${capacity.providerDid}`));\n      console.log(\n        chalk.gray(`   Total: ${capacity.totalQuantity} ${capacity.unit}`)\n      );\n\n      // Get desires\n      const desires = await store.getDesires(options.capacityId);\n      console.log(chalk.blue(`\\nüìä Found ${desires.length} desire(s)\\n`));\n\n      if (desires.length === 0) {\n        console.log(\n          chalk.yellow(\"‚ö†Ô∏è  No desires expressed for this capacity.\\n\")\n        );\n        return;\n      }\n\n      // Get commitments and compute MR\n      const mpc = new MPCProtocol(3);\n      const mrShares: Record<string, any> = {};\n      const desireMap: Record<string, number> = {};\n\n      for (const desire of desires) {\n        console.log(\n          chalk.gray(`   Processing recipient: ${desire.recipientDid}`)\n        );\n\n        // Get commitments\n        const commitmentProv = await store.getCommitment(\n          capacity.providerDid,\n          desire.recipientDid\n        );\n        const commitmentRecip = await store.getCommitment(\n          desire.recipientDid,\n          capacity.providerDid\n        );\n\n        if (!commitmentProv || !commitmentRecip) {\n          console.log(chalk.yellow(`   ‚ö†Ô∏è  Missing commitments, skipping...`));\n          continue;\n        }\n\n        // For demo, assume we can reconstruct (in reality, this would be MPC)\n        // Here we're simulating with placeholder values\n        const mrValue = 15.0; // Simplified for demo\n        mrShares[desire.recipientDid] = mpc.secretShare(mrValue, 3);\n        desireMap[desire.recipientDid] = desire.quantity;\n      }\n\n      console.log(chalk.blue(\"\\nüîê Running secure computation...\\n\"));\n\n      // Compute allocation\n      const allocations = mpc.computeNormalizedAllocation(\n        mrShares,\n        capacity.totalQuantity,\n        desireMap\n      );\n\n      console.log(chalk.green(\"‚úÖ Allocation computed successfully!\\n\"));\n      console.log(chalk.blue(\"üìä Results:\\n\"));\n      console.log(chalk.gray(\"‚îÄ\".repeat(70)));\n\n      for (const [recipientDid, quantity] of Object.entries(allocations)) {\n        console.log(chalk.white(`   Recipient: ${recipientDid}`));\n        console.log(\n          chalk.green(`   Allocated: ${quantity.toFixed(2)} ${capacity.unit}`)\n        );\n        console.log(chalk.gray(\"‚îÄ\".repeat(70)));\n\n        // Store allocation\n        store.addAllocation({\n          capacityId: capacity.id,\n          recipientDid,\n          quantityAllocated: quantity,\n          confirmed: false,\n        } as any);\n      }\n\n      if (options.useTee) {\n        console.log(\n          chalk.blue(\"\\nüîê TEE Attestation: RDX_Allocation_Enclave_v1\")\n        );\n      }\n\n      console.log();\n    } catch (error: any) {\n      console.error(chalk.red(`\\n‚ùå Error: ${error.message}\\n`));\n      process.exit(1);\n    }\n  });\n\n// ============================================================================\n// Show Allocation Command\n// ============================================================================\n\nprogram\n  .command(\"show-allocation\")\n  .description(\"Show allocation for a capacity (from network)\")\n  .requiredOption(\"--did <did>\", \"Your DID (for storage access)\")\n  .requiredOption(\"--capacity-id <id>\", \"Capacity ID\")\n  .action(async (options) => {\n    try {\n      const store = await initStorage(options.did);\n      const capacity = await store.getCapacity(options.capacityId);\n      if (!capacity) {\n        throw new Error(`Capacity ${options.capacityId} not found`);\n      }\n\n      const allocations = await store.getAllocations(options.capacityId);\n\n      if (allocations.length === 0) {\n        console.log(chalk.yellow(\"\\n‚ö†Ô∏è  No allocations computed yet.\\n\"));\n        return;\n      }\n\n      console.log(chalk.blue(\"\\nüìä Allocations:\\n\"));\n      console.log(chalk.gray(\"‚îÄ\".repeat(70)));\n\n      for (const alloc of allocations) {\n        console.log(chalk.white(`   Recipient: ${alloc.recipientDid}`));\n        console.log(\n          chalk.green(\n            `   Allocated: ${alloc.quantityAllocated} ${capacity.unit}`\n          )\n        );\n        console.log(\n          chalk.gray(`   Confirmed: ${alloc.confirmed ? \"Yes\" : \"No\"}`)\n        );\n        console.log(chalk.gray(\"‚îÄ\".repeat(70)));\n      }\n      console.log();\n    } catch (error: any) {\n      console.error(chalk.red(`\\n‚ùå Error: ${error.message}\\n`));\n      process.exit(1);\n    }\n  });\n\n// ============================================================================\n// Parse and Execute\n// ============================================================================\n\nprogram.parse();\n"],"names":["storage","userId","initStorage","did","chalk","HolsterStorage","program","Command","options","publicKey","randomBytes","error","participants","p","store","fromParticipant","toParticipant","recognition","createRecognitionValue","randomness","commitment","createCommitment","capacityId","filters","capacity","createCapacity","capacities","c","desires","mpc","MPCProtocol","mrShares","desireMap","desire","commitmentProv","commitmentRecip","mrValue","allocations","recipientDid","quantity","alloc"],"mappings":"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"}